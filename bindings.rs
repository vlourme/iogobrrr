/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _SYS_SOCKET_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 64;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 48;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOL_MPTCP: u32 = 284;
pub const SOL_MCTP: u32 = 285;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_RESERVE_MEM: u32 = 73;
pub const SO_TXREHASH: u32 = 74;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _SYS_UIO_H: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FPSIMD_MAGIC: u32 = 1179680769;
pub const ESR_MAGIC: u32 = 1163088385;
pub const EXTRA_MAGIC: u32 = 1163416577;
pub const SVE_MAGIC: u32 = 1398162689;
pub const SVE_SIG_FLAG_SM: u32 = 1;
pub const TPIDR2_MAGIC: u32 = 1414547714;
pub const ZA_MAGIC: u32 = 1412850501;
pub const ZT_MAGIC: u32 = 1515474433;
pub const __SVE_VQ_BYTES: u32 = 16;
pub const __SVE_VQ_MIN: u32 = 1;
pub const __SVE_VQ_MAX: u32 = 512;
pub const __SVE_VL_MIN: u32 = 16;
pub const __SVE_VL_MAX: u32 = 8192;
pub const __SVE_NUM_ZREGS: u32 = 32;
pub const __SVE_NUM_PREGS: u32 = 16;
pub const __SVE_ZREGS_OFFSET: u32 = 0;
pub const SVE_VQ_BYTES: u32 = 16;
pub const SVE_VQ_MIN: u32 = 1;
pub const SVE_VQ_MAX: u32 = 512;
pub const SVE_VL_MIN: u32 = 16;
pub const SVE_VL_MAX: u32 = 8192;
pub const SVE_NUM_ZREGS: u32 = 32;
pub const SVE_NUM_PREGS: u32 = 16;
pub const ZT_SIG_REG_SIZE: u32 = 512;
pub const ZT_SIG_REG_BYTES: u32 = 64;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const _SYS_PROCFS_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const _SYS_USER_H: u32 = 1;
pub const ELF_PRARGSZ: u32 = 80;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 5120;
pub const SIGSTKSZ: u32 = 16384;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _FCNTL_H: u32 = 1;
pub const __O_DIRECTORY: u32 = 16384;
pub const __O_NOFOLLOW: u32 = 32768;
pub const __O_DIRECT: u32 = 65536;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4210688;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 16384;
pub const O_NOFOLLOW: u32 = 32768;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _SYS_WAIT_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const WCOREFLAG: u32 = 128;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H: u32 = 1;
pub const RESOLVE_NO_XDEV: u32 = 1;
pub const RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const RESOLVE_NO_SYMLINKS: u32 = 4;
pub const RESOLVE_BENEATH: u32 = 8;
pub const RESOLVE_IN_ROOT: u32 = 16;
pub const RESOLVE_CACHED: u32 = 32;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const FSCRYPT_POLICY_FLAGS_PAD_4: u32 = 0;
pub const FSCRYPT_POLICY_FLAGS_PAD_8: u32 = 1;
pub const FSCRYPT_POLICY_FLAGS_PAD_16: u32 = 2;
pub const FSCRYPT_POLICY_FLAGS_PAD_32: u32 = 3;
pub const FSCRYPT_POLICY_FLAGS_PAD_MASK: u32 = 3;
pub const FSCRYPT_POLICY_FLAG_DIRECT_KEY: u32 = 4;
pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64: u32 = 8;
pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32: u32 = 16;
pub const FSCRYPT_MODE_AES_256_XTS: u32 = 1;
pub const FSCRYPT_MODE_AES_256_CTS: u32 = 4;
pub const FSCRYPT_MODE_AES_128_CBC: u32 = 5;
pub const FSCRYPT_MODE_AES_128_CTS: u32 = 6;
pub const FSCRYPT_MODE_SM4_XTS: u32 = 7;
pub const FSCRYPT_MODE_SM4_CTS: u32 = 8;
pub const FSCRYPT_MODE_ADIANTUM: u32 = 9;
pub const FSCRYPT_MODE_AES_256_HCTR2: u32 = 10;
pub const FSCRYPT_POLICY_V1: u32 = 0;
pub const FSCRYPT_KEY_DESCRIPTOR_SIZE: u32 = 8;
pub const FSCRYPT_KEY_DESC_PREFIX: &[u8; 9] = b"fscrypt:\0";
pub const FSCRYPT_KEY_DESC_PREFIX_SIZE: u32 = 8;
pub const FSCRYPT_MAX_KEY_SIZE: u32 = 64;
pub const FSCRYPT_POLICY_V2: u32 = 2;
pub const FSCRYPT_KEY_IDENTIFIER_SIZE: u32 = 16;
pub const FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR: u32 = 1;
pub const FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER: u32 = 2;
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY: u32 = 1;
pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS: u32 = 2;
pub const FSCRYPT_KEY_STATUS_ABSENT: u32 = 1;
pub const FSCRYPT_KEY_STATUS_PRESENT: u32 = 2;
pub const FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED: u32 = 3;
pub const FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF: u32 = 1;
pub const FS_KEY_DESCRIPTOR_SIZE: u32 = 8;
pub const FS_POLICY_FLAGS_PAD_4: u32 = 0;
pub const FS_POLICY_FLAGS_PAD_8: u32 = 1;
pub const FS_POLICY_FLAGS_PAD_16: u32 = 2;
pub const FS_POLICY_FLAGS_PAD_32: u32 = 3;
pub const FS_POLICY_FLAGS_PAD_MASK: u32 = 3;
pub const FS_POLICY_FLAG_DIRECT_KEY: u32 = 4;
pub const FS_POLICY_FLAGS_VALID: u32 = 7;
pub const FS_ENCRYPTION_MODE_INVALID: u32 = 0;
pub const FS_ENCRYPTION_MODE_AES_256_XTS: u32 = 1;
pub const FS_ENCRYPTION_MODE_AES_256_GCM: u32 = 2;
pub const FS_ENCRYPTION_MODE_AES_256_CBC: u32 = 3;
pub const FS_ENCRYPTION_MODE_AES_256_CTS: u32 = 4;
pub const FS_ENCRYPTION_MODE_AES_128_CBC: u32 = 5;
pub const FS_ENCRYPTION_MODE_AES_128_CTS: u32 = 6;
pub const FS_ENCRYPTION_MODE_ADIANTUM: u32 = 9;
pub const FS_KEY_DESC_PREFIX: &[u8; 9] = b"fscrypt:\0";
pub const FS_KEY_DESC_PREFIX_SIZE: u32 = 8;
pub const FS_MAX_KEY_SIZE: u32 = 64;
pub const MS_RDONLY: u32 = 1;
pub const MS_NOSUID: u32 = 2;
pub const MS_NODEV: u32 = 4;
pub const MS_NOEXEC: u32 = 8;
pub const MS_SYNCHRONOUS: u32 = 16;
pub const MS_REMOUNT: u32 = 32;
pub const MS_MANDLOCK: u32 = 64;
pub const MS_DIRSYNC: u32 = 128;
pub const MS_NOSYMFOLLOW: u32 = 256;
pub const MS_NOATIME: u32 = 1024;
pub const MS_NODIRATIME: u32 = 2048;
pub const MS_BIND: u32 = 4096;
pub const MS_MOVE: u32 = 8192;
pub const MS_REC: u32 = 16384;
pub const MS_VERBOSE: u32 = 32768;
pub const MS_SILENT: u32 = 32768;
pub const MS_POSIXACL: u32 = 65536;
pub const MS_UNBINDABLE: u32 = 131072;
pub const MS_PRIVATE: u32 = 262144;
pub const MS_SLAVE: u32 = 524288;
pub const MS_SHARED: u32 = 1048576;
pub const MS_RELATIME: u32 = 2097152;
pub const MS_KERNMOUNT: u32 = 4194304;
pub const MS_I_VERSION: u32 = 8388608;
pub const MS_STRICTATIME: u32 = 16777216;
pub const MS_LAZYTIME: u32 = 33554432;
pub const MS_SUBMOUNT: u32 = 67108864;
pub const MS_NOREMOTELOCK: u32 = 134217728;
pub const MS_NOSEC: u32 = 268435456;
pub const MS_BORN: u32 = 536870912;
pub const MS_ACTIVE: u32 = 1073741824;
pub const MS_NOUSER: u32 = 2147483648;
pub const MS_RMT_MASK: u32 = 41943121;
pub const MS_MGC_VAL: u32 = 3236757504;
pub const MS_MGC_MSK: u32 = 4294901760;
pub const OPEN_TREE_CLONE: u32 = 1;
pub const OPEN_TREE_CLOEXEC: u32 = 524288;
pub const MOVE_MOUNT_F_SYMLINKS: u32 = 1;
pub const MOVE_MOUNT_F_AUTOMOUNTS: u32 = 2;
pub const MOVE_MOUNT_F_EMPTY_PATH: u32 = 4;
pub const MOVE_MOUNT_T_SYMLINKS: u32 = 16;
pub const MOVE_MOUNT_T_AUTOMOUNTS: u32 = 32;
pub const MOVE_MOUNT_T_EMPTY_PATH: u32 = 64;
pub const MOVE_MOUNT__MASK: u32 = 119;
pub const FSOPEN_CLOEXEC: u32 = 1;
pub const FSPICK_CLOEXEC: u32 = 1;
pub const FSPICK_SYMLINK_NOFOLLOW: u32 = 2;
pub const FSPICK_NO_AUTOMOUNT: u32 = 4;
pub const FSPICK_EMPTY_PATH: u32 = 8;
pub const FSMOUNT_CLOEXEC: u32 = 1;
pub const MOUNT_ATTR_RDONLY: u32 = 1;
pub const MOUNT_ATTR_NOSUID: u32 = 2;
pub const MOUNT_ATTR_NODEV: u32 = 4;
pub const MOUNT_ATTR_NOEXEC: u32 = 8;
pub const MOUNT_ATTR__ATIME: u32 = 112;
pub const MOUNT_ATTR_RELATIME: u32 = 0;
pub const MOUNT_ATTR_NOATIME: u32 = 16;
pub const MOUNT_ATTR_STRICTATIME: u32 = 32;
pub const MOUNT_ATTR_NODIRATIME: u32 = 128;
pub const MOUNT_ATTR_IDMAP: u32 = 1048576;
pub const MOUNT_ATTR_NOSYMFOLLOW: u32 = 2097152;
pub const MOUNT_ATTR_SIZE_VER0: u32 = 32;
pub const INR_OPEN_CUR: u32 = 1024;
pub const INR_OPEN_MAX: u32 = 4096;
pub const BLOCK_SIZE_BITS: u32 = 10;
pub const BLOCK_SIZE: u32 = 1024;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const SEEK_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
pub const NR_FILE: u32 = 8192;
pub const FS_XFLAG_REALTIME: u32 = 1;
pub const FS_XFLAG_PREALLOC: u32 = 2;
pub const FS_XFLAG_IMMUTABLE: u32 = 8;
pub const FS_XFLAG_APPEND: u32 = 16;
pub const FS_XFLAG_SYNC: u32 = 32;
pub const FS_XFLAG_NOATIME: u32 = 64;
pub const FS_XFLAG_NODUMP: u32 = 128;
pub const FS_XFLAG_RTINHERIT: u32 = 256;
pub const FS_XFLAG_PROJINHERIT: u32 = 512;
pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
pub const FS_XFLAG_EXTSIZE: u32 = 2048;
pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
pub const FS_XFLAG_NODEFRAG: u32 = 8192;
pub const FS_XFLAG_FILESTREAM: u32 = 16384;
pub const FS_XFLAG_DAX: u32 = 32768;
pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
pub const FS_XFLAG_HASATTR: u32 = 2147483648;
pub const BMAP_IOCTL: u32 = 1;
pub const FSLABEL_MAX: u32 = 256;
pub const FS_SECRM_FL: u32 = 1;
pub const FS_UNRM_FL: u32 = 2;
pub const FS_COMPR_FL: u32 = 4;
pub const FS_SYNC_FL: u32 = 8;
pub const FS_IMMUTABLE_FL: u32 = 16;
pub const FS_APPEND_FL: u32 = 32;
pub const FS_NODUMP_FL: u32 = 64;
pub const FS_NOATIME_FL: u32 = 128;
pub const FS_DIRTY_FL: u32 = 256;
pub const FS_COMPRBLK_FL: u32 = 512;
pub const FS_NOCOMP_FL: u32 = 1024;
pub const FS_ENCRYPT_FL: u32 = 2048;
pub const FS_BTREE_FL: u32 = 4096;
pub const FS_INDEX_FL: u32 = 4096;
pub const FS_IMAGIC_FL: u32 = 8192;
pub const FS_JOURNAL_DATA_FL: u32 = 16384;
pub const FS_NOTAIL_FL: u32 = 32768;
pub const FS_DIRSYNC_FL: u32 = 65536;
pub const FS_TOPDIR_FL: u32 = 131072;
pub const FS_HUGE_FILE_FL: u32 = 262144;
pub const FS_EXTENT_FL: u32 = 524288;
pub const FS_VERITY_FL: u32 = 1048576;
pub const FS_EA_INODE_FL: u32 = 2097152;
pub const FS_EOFBLOCKS_FL: u32 = 4194304;
pub const FS_NOCOW_FL: u32 = 8388608;
pub const FS_DAX_FL: u32 = 33554432;
pub const FS_INLINE_DATA_FL: u32 = 268435456;
pub const FS_PROJINHERIT_FL: u32 = 536870912;
pub const FS_CASEFOLD_FL: u32 = 1073741824;
pub const FS_RESERVED_FL: u32 = 2147483648;
pub const FS_FL_USER_VISIBLE: u32 = 253951;
pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub const IORING_FILE_INDEX_ALLOC: i32 = -1;
pub const IORING_SETUP_IOPOLL: u32 = 1;
pub const IORING_SETUP_SQPOLL: u32 = 2;
pub const IORING_SETUP_SQ_AFF: u32 = 4;
pub const IORING_SETUP_CQSIZE: u32 = 8;
pub const IORING_SETUP_CLAMP: u32 = 16;
pub const IORING_SETUP_ATTACH_WQ: u32 = 32;
pub const IORING_SETUP_R_DISABLED: u32 = 64;
pub const IORING_SETUP_SUBMIT_ALL: u32 = 128;
pub const IORING_SETUP_COOP_TASKRUN: u32 = 256;
pub const IORING_SETUP_TASKRUN_FLAG: u32 = 512;
pub const IORING_SETUP_SQE128: u32 = 1024;
pub const IORING_SETUP_CQE32: u32 = 2048;
pub const IORING_SETUP_SINGLE_ISSUER: u32 = 4096;
pub const IORING_SETUP_DEFER_TASKRUN: u32 = 8192;
pub const IORING_SETUP_NO_MMAP: u32 = 16384;
pub const IORING_SETUP_REGISTERED_FD_ONLY: u32 = 32768;
pub const IORING_SETUP_NO_SQARRAY: u32 = 65536;
pub const IORING_SETUP_HYBRID_IOPOLL: u32 = 131072;
pub const IORING_URING_CMD_FIXED: u32 = 1;
pub const IORING_URING_CMD_MASK: u32 = 1;
pub const IORING_FSYNC_DATASYNC: u32 = 1;
pub const IORING_TIMEOUT_ABS: u32 = 1;
pub const IORING_TIMEOUT_UPDATE: u32 = 2;
pub const IORING_TIMEOUT_BOOTTIME: u32 = 4;
pub const IORING_TIMEOUT_REALTIME: u32 = 8;
pub const IORING_LINK_TIMEOUT_UPDATE: u32 = 16;
pub const IORING_TIMEOUT_ETIME_SUCCESS: u32 = 32;
pub const IORING_TIMEOUT_MULTISHOT: u32 = 64;
pub const IORING_TIMEOUT_CLOCK_MASK: u32 = 12;
pub const IORING_TIMEOUT_UPDATE_MASK: u32 = 18;
pub const SPLICE_F_FD_IN_FIXED: u32 = 2147483648;
pub const IORING_POLL_ADD_MULTI: u32 = 1;
pub const IORING_POLL_UPDATE_EVENTS: u32 = 2;
pub const IORING_POLL_UPDATE_USER_DATA: u32 = 4;
pub const IORING_POLL_ADD_LEVEL: u32 = 8;
pub const IORING_ASYNC_CANCEL_ALL: u32 = 1;
pub const IORING_ASYNC_CANCEL_FD: u32 = 2;
pub const IORING_ASYNC_CANCEL_ANY: u32 = 4;
pub const IORING_ASYNC_CANCEL_FD_FIXED: u32 = 8;
pub const IORING_ASYNC_CANCEL_USERDATA: u32 = 16;
pub const IORING_ASYNC_CANCEL_OP: u32 = 32;
pub const IORING_RECVSEND_POLL_FIRST: u32 = 1;
pub const IORING_RECV_MULTISHOT: u32 = 2;
pub const IORING_RECVSEND_FIXED_BUF: u32 = 4;
pub const IORING_SEND_ZC_REPORT_USAGE: u32 = 8;
pub const IORING_RECVSEND_BUNDLE: u32 = 16;
pub const IORING_NOTIF_USAGE_ZC_COPIED: u32 = 2147483648;
pub const IORING_ACCEPT_MULTISHOT: u32 = 1;
pub const IORING_ACCEPT_DONTWAIT: u32 = 2;
pub const IORING_ACCEPT_POLL_FIRST: u32 = 4;
pub const IORING_MSG_RING_CQE_SKIP: u32 = 1;
pub const IORING_MSG_RING_FLAGS_PASS: u32 = 2;
pub const IORING_FIXED_FD_NO_CLOEXEC: u32 = 1;
pub const IORING_NOP_INJECT_RESULT: u32 = 1;
pub const IORING_CQE_F_BUFFER: u32 = 1;
pub const IORING_CQE_F_MORE: u32 = 2;
pub const IORING_CQE_F_SOCK_NONEMPTY: u32 = 4;
pub const IORING_CQE_F_NOTIF: u32 = 8;
pub const IORING_CQE_F_BUF_MORE: u32 = 16;
pub const IORING_CQE_BUFFER_SHIFT: u32 = 16;
pub const IORING_OFF_SQ_RING: u32 = 0;
pub const IORING_OFF_CQ_RING: u32 = 134217728;
pub const IORING_OFF_SQES: u32 = 268435456;
pub const IORING_OFF_PBUF_RING: u32 = 2147483648;
pub const IORING_OFF_PBUF_SHIFT: u32 = 16;
pub const IORING_OFF_MMAP_MASK: u32 = 4160749568;
pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
pub const IORING_SQ_CQ_OVERFLOW: u32 = 2;
pub const IORING_SQ_TASKRUN: u32 = 4;
pub const IORING_CQ_EVENTFD_DISABLED: u32 = 1;
pub const IORING_ENTER_GETEVENTS: u32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
pub const IORING_ENTER_SQ_WAIT: u32 = 4;
pub const IORING_ENTER_EXT_ARG: u32 = 8;
pub const IORING_ENTER_REGISTERED_RING: u32 = 16;
pub const IORING_ENTER_ABS_TIMER: u32 = 32;
pub const IORING_ENTER_EXT_ARG_REG: u32 = 64;
pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
pub const IORING_FEAT_NODROP: u32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
pub const IORING_FEAT_RW_CUR_POS: u32 = 8;
pub const IORING_FEAT_CUR_PERSONALITY: u32 = 16;
pub const IORING_FEAT_FAST_POLL: u32 = 32;
pub const IORING_FEAT_POLL_32BITS: u32 = 64;
pub const IORING_FEAT_SQPOLL_NONFIXED: u32 = 128;
pub const IORING_FEAT_EXT_ARG: u32 = 256;
pub const IORING_FEAT_NATIVE_WORKERS: u32 = 512;
pub const IORING_FEAT_RSRC_TAGS: u32 = 1024;
pub const IORING_FEAT_CQE_SKIP: u32 = 2048;
pub const IORING_FEAT_LINKED_FILE: u32 = 4096;
pub const IORING_FEAT_REG_REG_RING: u32 = 8192;
pub const IORING_FEAT_RECVSEND_BUNDLE: u32 = 16384;
pub const IORING_FEAT_MIN_TIMEOUT: u32 = 32768;
pub const IORING_FEAT_RW_ATTR: u32 = 65536;
pub const IORING_RSRC_REGISTER_SPARSE: u32 = 1;
pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
pub const IO_URING_OP_SUPPORTED: u32 = 1;
pub const IORING_ZCRX_AREA_SHIFT: u32 = 48;
pub const IO_URING_VERSION_MAJOR: u32 = 2;
pub const IO_URING_VERSION_MINOR: u32 = 10;
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
unsafe extern "C" {
    #[link_name = "__bswap_16__extern"]
    pub fn __bswap_16(__bsx: __uint16_t) -> __uint16_t;
}
unsafe extern "C" {
    #[link_name = "__bswap_32__extern"]
    pub fn __bswap_32(__bsx: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    #[link_name = "__bswap_64__extern"]
    pub fn __bswap_64(__bsx: __uint64_t) -> __uint64_t;
}
unsafe extern "C" {
    #[link_name = "__uint16_identity__extern"]
    pub fn __uint16_identity(__x: __uint16_t) -> __uint16_t;
}
unsafe extern "C" {
    #[link_name = "__uint32_identity__extern"]
    pub fn __uint32_identity(__x: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    #[link_name = "__uint64_identity__extern"]
    pub fn __uint64_identity(__x: __uint64_t) -> __uint64_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __glibc_unused___g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_1::__wseq32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_1, __wseq32) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Alignment of __pthread_cond_s__bindgen_ty_2"]
        [::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start) - 0usize];
    ["Offset of field: __pthread_cond_s__bindgen_ty_2::__g1_start32"]
        [::std::mem::offset_of!(__pthread_cond_s__bindgen_ty_2, __g1_start32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__glibc_unused___g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __glibc_unused___g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 8usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 8usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 64usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 64usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 48usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 8usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
unsafe extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad1: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub __pad2: ::std::os::raw::c_int,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stat"][::std::mem::size_of::<stat>() - 128usize];
    ["Alignment of stat"][::std::mem::align_of::<stat>() - 8usize];
    ["Offset of field: stat::st_dev"][::std::mem::offset_of!(stat, st_dev) - 0usize];
    ["Offset of field: stat::st_ino"][::std::mem::offset_of!(stat, st_ino) - 8usize];
    ["Offset of field: stat::st_mode"][::std::mem::offset_of!(stat, st_mode) - 16usize];
    ["Offset of field: stat::st_nlink"][::std::mem::offset_of!(stat, st_nlink) - 20usize];
    ["Offset of field: stat::st_uid"][::std::mem::offset_of!(stat, st_uid) - 24usize];
    ["Offset of field: stat::st_gid"][::std::mem::offset_of!(stat, st_gid) - 28usize];
    ["Offset of field: stat::st_rdev"][::std::mem::offset_of!(stat, st_rdev) - 32usize];
    ["Offset of field: stat::__pad1"][::std::mem::offset_of!(stat, __pad1) - 40usize];
    ["Offset of field: stat::st_size"][::std::mem::offset_of!(stat, st_size) - 48usize];
    ["Offset of field: stat::st_blksize"][::std::mem::offset_of!(stat, st_blksize) - 56usize];
    ["Offset of field: stat::__pad2"][::std::mem::offset_of!(stat, __pad2) - 60usize];
    ["Offset of field: stat::st_blocks"][::std::mem::offset_of!(stat, st_blocks) - 64usize];
    ["Offset of field: stat::st_atim"][::std::mem::offset_of!(stat, st_atim) - 72usize];
    ["Offset of field: stat::st_mtim"][::std::mem::offset_of!(stat, st_mtim) - 88usize];
    ["Offset of field: stat::st_ctim"][::std::mem::offset_of!(stat, st_ctim) - 104usize];
    ["Offset of field: stat::__glibc_reserved"]
        [::std::mem::offset_of!(stat, __glibc_reserved) - 120usize];
};
unsafe extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
unsafe extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_1, si_uid) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_tid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_tid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_overrun"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_overrun) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::si_sigval"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_2, si_sigval) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_uid) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_3::si_sigval"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_3, si_sigval) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_pid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_pid) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_uid"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_uid) - 4usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_status"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_status) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_utime"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_utime) - 16usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_4::si_stime"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_4, si_stime) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(
        ) - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_lower"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _lower) - 0usize] ;
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1::_upper"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 , _upper) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_addr_bnd"][::std::mem::offset_of!(
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _addr_bnd
    ) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1::_pkey"][::std::mem::offset_of!(
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        _pkey
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 32usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::si_addr_lsb"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, si_addr_lsb) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_5::_bounds"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_5, _bounds) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_band"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_band) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_6::si_fd"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_6, si_fd) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 16usize];
    ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_7"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_call_addr"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _call_addr) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_syscall"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _syscall) - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_7::_arch"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1__bindgen_ty_7, _arch) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t__bindgen_ty_1"]
        [::std::mem::size_of::<siginfo_t__bindgen_ty_1>() - 112usize];
    ["Alignment of siginfo_t__bindgen_ty_1"]
        [::std::mem::align_of::<siginfo_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_kill"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _kill) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_timer"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _timer) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_rt"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _rt) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigchld"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigchld) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigfault"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigfault) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigpoll"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigpoll) - 0usize];
    ["Offset of field: siginfo_t__bindgen_ty_1::_sigsys"]
        [::std::mem::offset_of!(siginfo_t__bindgen_ty_1, _sigsys) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of siginfo_t"][::std::mem::size_of::<siginfo_t>() - 128usize];
    ["Alignment of siginfo_t"][::std::mem::align_of::<siginfo_t>() - 8usize];
    ["Offset of field: siginfo_t::si_signo"][::std::mem::offset_of!(siginfo_t, si_signo) - 0usize];
    ["Offset of field: siginfo_t::si_errno"][::std::mem::offset_of!(siginfo_t, si_errno) - 4usize];
    ["Offset of field: siginfo_t::si_code"][::std::mem::offset_of!(siginfo_t, si_code) - 8usize];
    ["Offset of field: siginfo_t::__pad0"][::std::mem::offset_of!(siginfo_t, __pad0) - 12usize];
    ["Offset of field: siginfo_t::_sifields"]
        [::std::mem::offset_of!(siginfo_t, _sifields) - 16usize];
};
pub const SI_ASYNCNL: _bindgen_ty_4 = -60;
pub const SI_DETHREAD: _bindgen_ty_4 = -7;
pub const SI_TKILL: _bindgen_ty_4 = -6;
pub const SI_SIGIO: _bindgen_ty_4 = -5;
pub const SI_ASYNCIO: _bindgen_ty_4 = -4;
pub const SI_MESGQ: _bindgen_ty_4 = -3;
pub const SI_TIMER: _bindgen_ty_4 = -2;
pub const SI_QUEUE: _bindgen_ty_4 = -1;
pub const SI_USER: _bindgen_ty_4 = 0;
pub const SI_KERNEL: _bindgen_ty_4 = 128;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_5 = 1;
pub const ILL_ILLOPN: _bindgen_ty_5 = 2;
pub const ILL_ILLADR: _bindgen_ty_5 = 3;
pub const ILL_ILLTRP: _bindgen_ty_5 = 4;
pub const ILL_PRVOPC: _bindgen_ty_5 = 5;
pub const ILL_PRVREG: _bindgen_ty_5 = 6;
pub const ILL_COPROC: _bindgen_ty_5 = 7;
pub const ILL_BADSTK: _bindgen_ty_5 = 8;
pub const ILL_BADIADDR: _bindgen_ty_5 = 9;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_6 = 1;
pub const FPE_INTOVF: _bindgen_ty_6 = 2;
pub const FPE_FLTDIV: _bindgen_ty_6 = 3;
pub const FPE_FLTOVF: _bindgen_ty_6 = 4;
pub const FPE_FLTUND: _bindgen_ty_6 = 5;
pub const FPE_FLTRES: _bindgen_ty_6 = 6;
pub const FPE_FLTINV: _bindgen_ty_6 = 7;
pub const FPE_FLTSUB: _bindgen_ty_6 = 8;
pub const FPE_FLTUNK: _bindgen_ty_6 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_6 = 15;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_7 = 1;
pub const SEGV_ACCERR: _bindgen_ty_7 = 2;
pub const SEGV_BNDERR: _bindgen_ty_7 = 3;
pub const SEGV_PKUERR: _bindgen_ty_7 = 4;
pub const SEGV_ACCADI: _bindgen_ty_7 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_7 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_7 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_7 = 8;
pub const SEGV_MTESERR: _bindgen_ty_7 = 9;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_8 = 1;
pub const BUS_ADRERR: _bindgen_ty_8 = 2;
pub const BUS_OBJERR: _bindgen_ty_8 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_8 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_8 = 5;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_9 = 1;
pub const CLD_KILLED: _bindgen_ty_9 = 2;
pub const CLD_DUMPED: _bindgen_ty_9 = 3;
pub const CLD_TRAPPED: _bindgen_ty_9 = 4;
pub const CLD_STOPPED: _bindgen_ty_9 = 5;
pub const CLD_CONTINUED: _bindgen_ty_9 = 6;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_10 = 1;
pub const POLL_OUT: _bindgen_ty_10 = 2;
pub const POLL_MSG: _bindgen_ty_10 = 3;
pub const POLL_ERR: _bindgen_ty_10 = 4;
pub const POLL_PRI: _bindgen_ty_10 = 5;
pub const POLL_HUP: _bindgen_ty_10 = 6;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1"][::std::mem::size_of::<sigevent__bindgen_ty_1>() - 48usize];
    ["Alignment of sigevent__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _pad) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_tid"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _tid) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_sigev_thread"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 64usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 12usize];
    ["Offset of field: sigevent::_sigev_un"][::std::mem::offset_of!(sigevent, _sigev_un) - 16usize];
};
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_11 = 0;
pub const SIGEV_NONE: _bindgen_ty_11 = 1;
pub const SIGEV_THREAD: _bindgen_ty_11 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
unsafe extern "C" {
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
        -> __sighandler_t;
}
unsafe extern "C" {
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
unsafe extern "C" {
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
unsafe extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn psignal(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
unsafe extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction__bindgen_ty_1"][::std::mem::size_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Alignment of sigaction__bindgen_ty_1"]
        [::std::mem::align_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigaction__bindgen_ty_1::sa_handler"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, sa_handler) - 0usize];
    ["Offset of field: sigaction__bindgen_ty_1::sa_sigaction"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, sa_sigaction) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 152usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_handler"]
        [::std::mem::offset_of!(sigaction, __sigaction_handler) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"]
        [::std::mem::offset_of!(sigaction, sa_flags) - 136usize];
    ["Offset of field: sigaction::sa_restorer"]
        [::std::mem::offset_of!(sigaction, sa_restorer) - 144usize];
};
unsafe extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub fault_address: __u64,
    pub regs: [__u64; 31usize],
    pub sp: __u64,
    pub pc: __u64,
    pub pstate: __u64,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [__u8; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext"][::std::mem::size_of::<sigcontext>() - 4384usize];
    ["Alignment of sigcontext"][::std::mem::align_of::<sigcontext>() - 16usize];
    ["Offset of field: sigcontext::fault_address"]
        [::std::mem::offset_of!(sigcontext, fault_address) - 0usize];
    ["Offset of field: sigcontext::regs"][::std::mem::offset_of!(sigcontext, regs) - 8usize];
    ["Offset of field: sigcontext::sp"][::std::mem::offset_of!(sigcontext, sp) - 256usize];
    ["Offset of field: sigcontext::pc"][::std::mem::offset_of!(sigcontext, pc) - 264usize];
    ["Offset of field: sigcontext::pstate"][::std::mem::offset_of!(sigcontext, pstate) - 272usize];
    ["Offset of field: sigcontext::__reserved"]
        [::std::mem::offset_of!(sigcontext, __reserved) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aarch64_ctx {
    pub magic: __u32,
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _aarch64_ctx"][::std::mem::size_of::<_aarch64_ctx>() - 8usize];
    ["Alignment of _aarch64_ctx"][::std::mem::align_of::<_aarch64_ctx>() - 4usize];
    ["Offset of field: _aarch64_ctx::magic"][::std::mem::offset_of!(_aarch64_ctx, magic) - 0usize];
    ["Offset of field: _aarch64_ctx::size"][::std::mem::offset_of!(_aarch64_ctx, size) - 4usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct fpsimd_context {
    pub head: _aarch64_ctx,
    pub fpsr: __u32,
    pub fpcr: __u32,
    pub vregs: [__uint128_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fpsimd_context"][::std::mem::size_of::<fpsimd_context>() - 528usize];
    ["Alignment of fpsimd_context"][::std::mem::align_of::<fpsimd_context>() - 16usize];
    ["Offset of field: fpsimd_context::head"]
        [::std::mem::offset_of!(fpsimd_context, head) - 0usize];
    ["Offset of field: fpsimd_context::fpsr"]
        [::std::mem::offset_of!(fpsimd_context, fpsr) - 8usize];
    ["Offset of field: fpsimd_context::fpcr"]
        [::std::mem::offset_of!(fpsimd_context, fpcr) - 12usize];
    ["Offset of field: fpsimd_context::vregs"]
        [::std::mem::offset_of!(fpsimd_context, vregs) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esr_context {
    pub head: _aarch64_ctx,
    pub esr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of esr_context"][::std::mem::size_of::<esr_context>() - 16usize];
    ["Alignment of esr_context"][::std::mem::align_of::<esr_context>() - 8usize];
    ["Offset of field: esr_context::head"][::std::mem::offset_of!(esr_context, head) - 0usize];
    ["Offset of field: esr_context::esr"][::std::mem::offset_of!(esr_context, esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extra_context {
    pub head: _aarch64_ctx,
    pub datap: __u64,
    pub size: __u32,
    pub __reserved: [__u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extra_context"][::std::mem::size_of::<extra_context>() - 32usize];
    ["Alignment of extra_context"][::std::mem::align_of::<extra_context>() - 8usize];
    ["Offset of field: extra_context::head"][::std::mem::offset_of!(extra_context, head) - 0usize];
    ["Offset of field: extra_context::datap"]
        [::std::mem::offset_of!(extra_context, datap) - 8usize];
    ["Offset of field: extra_context::size"][::std::mem::offset_of!(extra_context, size) - 16usize];
    ["Offset of field: extra_context::__reserved"]
        [::std::mem::offset_of!(extra_context, __reserved) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sve_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub flags: __u16,
    pub __reserved: [__u16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sve_context"][::std::mem::size_of::<sve_context>() - 16usize];
    ["Alignment of sve_context"][::std::mem::align_of::<sve_context>() - 4usize];
    ["Offset of field: sve_context::head"][::std::mem::offset_of!(sve_context, head) - 0usize];
    ["Offset of field: sve_context::vl"][::std::mem::offset_of!(sve_context, vl) - 8usize];
    ["Offset of field: sve_context::flags"][::std::mem::offset_of!(sve_context, flags) - 10usize];
    ["Offset of field: sve_context::__reserved"]
        [::std::mem::offset_of!(sve_context, __reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tpidr2_context {
    pub head: _aarch64_ctx,
    pub tpidr2: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tpidr2_context"][::std::mem::size_of::<tpidr2_context>() - 16usize];
    ["Alignment of tpidr2_context"][::std::mem::align_of::<tpidr2_context>() - 8usize];
    ["Offset of field: tpidr2_context::head"]
        [::std::mem::offset_of!(tpidr2_context, head) - 0usize];
    ["Offset of field: tpidr2_context::tpidr2"]
        [::std::mem::offset_of!(tpidr2_context, tpidr2) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct za_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub __reserved: [__u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of za_context"][::std::mem::size_of::<za_context>() - 16usize];
    ["Alignment of za_context"][::std::mem::align_of::<za_context>() - 4usize];
    ["Offset of field: za_context::head"][::std::mem::offset_of!(za_context, head) - 0usize];
    ["Offset of field: za_context::vl"][::std::mem::offset_of!(za_context, vl) - 8usize];
    ["Offset of field: za_context::__reserved"]
        [::std::mem::offset_of!(za_context, __reserved) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zt_context {
    pub head: _aarch64_ctx,
    pub nregs: __u16,
    pub __reserved: [__u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of zt_context"][::std::mem::size_of::<zt_context>() - 16usize];
    ["Alignment of zt_context"][::std::mem::align_of::<zt_context>() - 4usize];
    ["Offset of field: zt_context::head"][::std::mem::offset_of!(zt_context, head) - 0usize];
    ["Offset of field: zt_context::nregs"][::std::mem::offset_of!(zt_context, nregs) - 8usize];
    ["Offset of field: zt_context::__reserved"]
        [::std::mem::offset_of!(zt_context, __reserved) - 10usize];
};
unsafe extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stack_t"][::std::mem::size_of::<stack_t>() - 24usize];
    ["Alignment of stack_t"][::std::mem::align_of::<stack_t>() - 8usize];
    ["Offset of field: stack_t::ss_sp"][::std::mem::offset_of!(stack_t, ss_sp) - 0usize];
    ["Offset of field: stack_t::ss_flags"][::std::mem::offset_of!(stack_t, ss_flags) - 8usize];
    ["Offset of field: stack_t::ss_size"][::std::mem::offset_of!(stack_t, ss_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::std::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::std::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::std::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::std::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
unsafe extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerval"][::std::mem::size_of::<itimerval>() - 32usize];
    ["Alignment of itimerval"][::std::mem::align_of::<itimerval>() - 8usize];
    ["Offset of field: itimerval::it_interval"]
        [::std::mem::offset_of!(itimerval, it_interval) - 0usize];
    ["Offset of field: itimerval::it_value"][::std::mem::offset_of!(itimerval, it_value) - 16usize];
};
pub type __itimer_which_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_regs_struct"][::std::mem::size_of::<user_regs_struct>() - 272usize];
    ["Alignment of user_regs_struct"][::std::mem::align_of::<user_regs_struct>() - 8usize];
    ["Offset of field: user_regs_struct::regs"]
        [::std::mem::offset_of!(user_regs_struct, regs) - 0usize];
    ["Offset of field: user_regs_struct::sp"]
        [::std::mem::offset_of!(user_regs_struct, sp) - 248usize];
    ["Offset of field: user_regs_struct::pc"]
        [::std::mem::offset_of!(user_regs_struct, pc) - 256usize];
    ["Offset of field: user_regs_struct::pstate"]
        [::std::mem::offset_of!(user_regs_struct, pstate) - 264usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct user_fpsimd_struct {
    pub vregs: [__uint128_t; 32usize],
    pub fpsr: ::std::os::raw::c_uint,
    pub fpcr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of user_fpsimd_struct"][::std::mem::size_of::<user_fpsimd_struct>() - 528usize];
    ["Alignment of user_fpsimd_struct"][::std::mem::align_of::<user_fpsimd_struct>() - 16usize];
    ["Offset of field: user_fpsimd_struct::vregs"]
        [::std::mem::offset_of!(user_fpsimd_struct, vregs) - 0usize];
    ["Offset of field: user_fpsimd_struct::fpsr"]
        [::std::mem::offset_of!(user_fpsimd_struct, fpsr) - 512usize];
    ["Offset of field: user_fpsimd_struct::fpcr"]
        [::std::mem::offset_of!(user_fpsimd_struct, fpcr) - 516usize];
};
pub type elf_greg_t = __uint64_t;
pub type elf_gregset_t = [elf_greg_t; 34usize];
pub type elf_fpregset_t = user_fpsimd_struct;
pub type __pr_uid_t = ::std::os::raw::c_uint;
pub type __pr_gid_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_siginfo"][::std::mem::size_of::<elf_siginfo>() - 12usize];
    ["Alignment of elf_siginfo"][::std::mem::align_of::<elf_siginfo>() - 4usize];
    ["Offset of field: elf_siginfo::si_signo"]
        [::std::mem::offset_of!(elf_siginfo, si_signo) - 0usize];
    ["Offset of field: elf_siginfo::si_code"]
        [::std::mem::offset_of!(elf_siginfo, si_code) - 4usize];
    ["Offset of field: elf_siginfo::si_errno"]
        [::std::mem::offset_of!(elf_siginfo, si_errno) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prstatus {
    pub pr_info: elf_siginfo,
    pub pr_cursig: ::std::os::raw::c_short,
    pub pr_sigpend: ::std::os::raw::c_ulong,
    pub pr_sighold: ::std::os::raw::c_ulong,
    pub pr_pid: __pid_t,
    pub pr_ppid: __pid_t,
    pub pr_pgrp: __pid_t,
    pub pr_sid: __pid_t,
    pub pr_utime: timeval,
    pub pr_stime: timeval,
    pub pr_cutime: timeval,
    pub pr_cstime: timeval,
    pub pr_reg: elf_gregset_t,
    pub pr_fpvalid: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_prstatus"][::std::mem::size_of::<elf_prstatus>() - 392usize];
    ["Alignment of elf_prstatus"][::std::mem::align_of::<elf_prstatus>() - 8usize];
    ["Offset of field: elf_prstatus::pr_info"]
        [::std::mem::offset_of!(elf_prstatus, pr_info) - 0usize];
    ["Offset of field: elf_prstatus::pr_cursig"]
        [::std::mem::offset_of!(elf_prstatus, pr_cursig) - 12usize];
    ["Offset of field: elf_prstatus::pr_sigpend"]
        [::std::mem::offset_of!(elf_prstatus, pr_sigpend) - 16usize];
    ["Offset of field: elf_prstatus::pr_sighold"]
        [::std::mem::offset_of!(elf_prstatus, pr_sighold) - 24usize];
    ["Offset of field: elf_prstatus::pr_pid"]
        [::std::mem::offset_of!(elf_prstatus, pr_pid) - 32usize];
    ["Offset of field: elf_prstatus::pr_ppid"]
        [::std::mem::offset_of!(elf_prstatus, pr_ppid) - 36usize];
    ["Offset of field: elf_prstatus::pr_pgrp"]
        [::std::mem::offset_of!(elf_prstatus, pr_pgrp) - 40usize];
    ["Offset of field: elf_prstatus::pr_sid"]
        [::std::mem::offset_of!(elf_prstatus, pr_sid) - 44usize];
    ["Offset of field: elf_prstatus::pr_utime"]
        [::std::mem::offset_of!(elf_prstatus, pr_utime) - 48usize];
    ["Offset of field: elf_prstatus::pr_stime"]
        [::std::mem::offset_of!(elf_prstatus, pr_stime) - 64usize];
    ["Offset of field: elf_prstatus::pr_cutime"]
        [::std::mem::offset_of!(elf_prstatus, pr_cutime) - 80usize];
    ["Offset of field: elf_prstatus::pr_cstime"]
        [::std::mem::offset_of!(elf_prstatus, pr_cstime) - 96usize];
    ["Offset of field: elf_prstatus::pr_reg"]
        [::std::mem::offset_of!(elf_prstatus, pr_reg) - 112usize];
    ["Offset of field: elf_prstatus::pr_fpvalid"]
        [::std::mem::offset_of!(elf_prstatus, pr_fpvalid) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_prpsinfo {
    pub pr_state: ::std::os::raw::c_char,
    pub pr_sname: ::std::os::raw::c_char,
    pub pr_zomb: ::std::os::raw::c_char,
    pub pr_nice: ::std::os::raw::c_char,
    pub pr_flag: ::std::os::raw::c_ulong,
    pub pr_uid: __pr_uid_t,
    pub pr_gid: __pr_gid_t,
    pub pr_pid: ::std::os::raw::c_int,
    pub pr_ppid: ::std::os::raw::c_int,
    pub pr_pgrp: ::std::os::raw::c_int,
    pub pr_sid: ::std::os::raw::c_int,
    pub pr_fname: [::std::os::raw::c_char; 16usize],
    pub pr_psargs: [::std::os::raw::c_char; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of elf_prpsinfo"][::std::mem::size_of::<elf_prpsinfo>() - 136usize];
    ["Alignment of elf_prpsinfo"][::std::mem::align_of::<elf_prpsinfo>() - 8usize];
    ["Offset of field: elf_prpsinfo::pr_state"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_state) - 0usize];
    ["Offset of field: elf_prpsinfo::pr_sname"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_sname) - 1usize];
    ["Offset of field: elf_prpsinfo::pr_zomb"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_zomb) - 2usize];
    ["Offset of field: elf_prpsinfo::pr_nice"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_nice) - 3usize];
    ["Offset of field: elf_prpsinfo::pr_flag"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_flag) - 8usize];
    ["Offset of field: elf_prpsinfo::pr_uid"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_uid) - 16usize];
    ["Offset of field: elf_prpsinfo::pr_gid"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_gid) - 20usize];
    ["Offset of field: elf_prpsinfo::pr_pid"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_pid) - 24usize];
    ["Offset of field: elf_prpsinfo::pr_ppid"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_ppid) - 28usize];
    ["Offset of field: elf_prpsinfo::pr_pgrp"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_pgrp) - 32usize];
    ["Offset of field: elf_prpsinfo::pr_sid"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_sid) - 36usize];
    ["Offset of field: elf_prpsinfo::pr_fname"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_fname) - 40usize];
    ["Offset of field: elf_prpsinfo::pr_psargs"]
        [::std::mem::offset_of!(elf_prpsinfo, pr_psargs) - 56usize];
};
pub type psaddr_t = *mut ::std::os::raw::c_void;
pub type __prgregset_t = elf_gregset_t;
pub type __prfpregset_t = elf_fpregset_t;
pub type prgregset_t = __prgregset_t;
pub type prfpregset_t = __prfpregset_t;
pub type lwpid_t = __pid_t;
pub type prstatus_t = elf_prstatus;
pub type prpsinfo_t = elf_prpsinfo;
pub type greg_t = elf_greg_t;
pub type gregset_t = elf_gregset_t;
pub type fpregset_t = elf_fpregset_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub fault_address: ::std::os::raw::c_ulonglong,
    pub regs: [::std::os::raw::c_ulonglong; 31usize],
    pub sp: ::std::os::raw::c_ulonglong,
    pub pc: ::std::os::raw::c_ulonglong,
    pub pstate: ::std::os::raw::c_ulonglong,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [::std::os::raw::c_uchar; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcontext_t"][::std::mem::size_of::<mcontext_t>() - 4384usize];
    ["Alignment of mcontext_t"][::std::mem::align_of::<mcontext_t>() - 16usize];
    ["Offset of field: mcontext_t::fault_address"]
        [::std::mem::offset_of!(mcontext_t, fault_address) - 0usize];
    ["Offset of field: mcontext_t::regs"][::std::mem::offset_of!(mcontext_t, regs) - 8usize];
    ["Offset of field: mcontext_t::sp"][::std::mem::offset_of!(mcontext_t, sp) - 256usize];
    ["Offset of field: mcontext_t::pc"][::std::mem::offset_of!(mcontext_t, pc) - 264usize];
    ["Offset of field: mcontext_t::pstate"][::std::mem::offset_of!(mcontext_t, pstate) - 272usize];
    ["Offset of field: mcontext_t::__reserved"]
        [::std::mem::offset_of!(mcontext_t, __reserved) - 288usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_sigmask: sigset_t,
    pub __bindgen_padding_0: u64,
    pub uc_mcontext: mcontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ucontext_t"][::std::mem::size_of::<ucontext_t>() - 4560usize];
    ["Alignment of ucontext_t"][::std::mem::align_of::<ucontext_t>() - 16usize];
    ["Offset of field: ucontext_t::uc_flags"]
        [::std::mem::offset_of!(ucontext_t, uc_flags) - 0usize];
    ["Offset of field: ucontext_t::uc_link"][::std::mem::offset_of!(ucontext_t, uc_link) - 8usize];
    ["Offset of field: ucontext_t::uc_stack"]
        [::std::mem::offset_of!(ucontext_t, uc_stack) - 16usize];
    ["Offset of field: ucontext_t::uc_sigmask"]
        [::std::mem::offset_of!(ucontext_t, uc_sigmask) - 40usize];
    ["Offset of field: ucontext_t::uc_mcontext"]
        [::std::mem::offset_of!(ucontext_t, uc_mcontext) - 176usize];
};
unsafe extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_12 = 1;
pub const SS_DISABLE: _bindgen_ty_12 = 2;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of flock"][::std::mem::size_of::<flock>() - 32usize];
    ["Alignment of flock"][::std::mem::align_of::<flock>() - 8usize];
    ["Offset of field: flock::l_type"][::std::mem::offset_of!(flock, l_type) - 0usize];
    ["Offset of field: flock::l_whence"][::std::mem::offset_of!(flock, l_whence) - 2usize];
    ["Offset of field: flock::l_start"][::std::mem::offset_of!(flock, l_start) - 8usize];
    ["Offset of field: flock::l_len"][::std::mem::offset_of!(flock, l_len) - 16usize];
    ["Offset of field: flock::l_pid"][::std::mem::offset_of!(flock, l_pid) - 24usize];
};
unsafe extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
unsafe extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
unsafe extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
unsafe extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "__fswab16__extern"]
    pub fn __fswab16(val: __u16) -> __u16;
}
unsafe extern "C" {
    #[link_name = "__fswab32__extern"]
    pub fn __fswab32(val: __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__fswab64__extern"]
    pub fn __fswab64(val: __u64) -> __u64;
}
unsafe extern "C" {
    #[link_name = "__fswahw32__extern"]
    pub fn __fswahw32(val: __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__fswahb32__extern"]
    pub fn __fswahb32(val: __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__swab__extern"]
    pub fn __swab(y: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "__swab16p__extern"]
    pub fn __swab16p(p: *const __u16) -> __u16;
}
unsafe extern "C" {
    #[link_name = "__swab32p__extern"]
    pub fn __swab32p(p: *const __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__swab64p__extern"]
    pub fn __swab64p(p: *const __u64) -> __u64;
}
unsafe extern "C" {
    #[link_name = "__swahw32p__extern"]
    pub fn __swahw32p(p: *const __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__swahb32p__extern"]
    pub fn __swahb32p(p: *const __u32) -> __u32;
}
unsafe extern "C" {
    #[link_name = "__swab16s__extern"]
    pub fn __swab16s(p: *mut __u16);
}
unsafe extern "C" {
    #[link_name = "__swab32s__extern"]
    pub fn __swab32s(p: *mut __u32);
}
unsafe extern "C" {
    #[link_name = "__swab64s__extern"]
    pub fn __swab64s(p: *mut __u64);
}
unsafe extern "C" {
    #[link_name = "__swahw32s__extern"]
    pub fn __swahw32s(p: *mut __u32);
}
unsafe extern "C" {
    #[link_name = "__swahb32s__extern"]
    pub fn __swahb32s(p: *mut __u32);
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn wait(__stat_loc: *mut ::std::os::raw::c_int) -> __pid_t;
}
unsafe extern "C" {
    pub fn waitpid(
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
    ) -> __pid_t;
}
unsafe extern "C" {
    pub fn waitid(
        __idtype: idtype_t,
        __id: __id_t,
        __infop: *mut siginfo_t,
        __options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn wait3(
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t;
}
unsafe extern "C" {
    pub fn wait4(
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_timespec"][::std::mem::size_of::<__kernel_timespec>() - 16usize];
    ["Alignment of __kernel_timespec"][::std::mem::align_of::<__kernel_timespec>() - 8usize];
    ["Offset of field: __kernel_timespec::tv_sec"]
        [::std::mem::offset_of!(__kernel_timespec, tv_sec) - 0usize];
    ["Offset of field: __kernel_timespec::tv_nsec"]
        [::std::mem::offset_of!(__kernel_timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_itimerspec {
    pub it_interval: __kernel_timespec,
    pub it_value: __kernel_timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_itimerspec"][::std::mem::size_of::<__kernel_itimerspec>() - 32usize];
    ["Alignment of __kernel_itimerspec"][::std::mem::align_of::<__kernel_itimerspec>() - 8usize];
    ["Offset of field: __kernel_itimerspec::it_interval"]
        [::std::mem::offset_of!(__kernel_itimerspec, it_interval) - 0usize];
    ["Offset of field: __kernel_itimerspec::it_value"]
        [::std::mem::offset_of!(__kernel_itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_timeval {
    pub tv_sec: __kernel_long_t,
    pub tv_usec: __kernel_long_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_timeval"][::std::mem::size_of::<__kernel_old_timeval>() - 16usize];
    ["Alignment of __kernel_old_timeval"][::std::mem::align_of::<__kernel_old_timeval>() - 8usize];
    ["Offset of field: __kernel_old_timeval::tv_sec"]
        [::std::mem::offset_of!(__kernel_old_timeval, tv_sec) - 0usize];
    ["Offset of field: __kernel_old_timeval::tv_usec"]
        [::std::mem::offset_of!(__kernel_old_timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_timespec"][::std::mem::size_of::<__kernel_old_timespec>() - 16usize];
    ["Alignment of __kernel_old_timespec"]
        [::std::mem::align_of::<__kernel_old_timespec>() - 8usize];
    ["Offset of field: __kernel_old_timespec::tv_sec"]
        [::std::mem::offset_of!(__kernel_old_timespec, tv_sec) - 0usize];
    ["Offset of field: __kernel_old_timespec::tv_nsec"]
        [::std::mem::offset_of!(__kernel_old_timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_itimerval {
    pub it_interval: __kernel_old_timeval,
    pub it_value: __kernel_old_timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_old_itimerval"][::std::mem::size_of::<__kernel_old_itimerval>() - 32usize];
    ["Alignment of __kernel_old_itimerval"]
        [::std::mem::align_of::<__kernel_old_itimerval>() - 8usize];
    ["Offset of field: __kernel_old_itimerval::it_interval"]
        [::std::mem::offset_of!(__kernel_old_itimerval, it_interval) - 0usize];
    ["Offset of field: __kernel_old_itimerval::it_value"]
        [::std::mem::offset_of!(__kernel_old_itimerval, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sock_timeval {
    pub tv_sec: __s64,
    pub tv_usec: __s64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_sock_timeval"][::std::mem::size_of::<__kernel_sock_timeval>() - 16usize];
    ["Alignment of __kernel_sock_timeval"]
        [::std::mem::align_of::<__kernel_sock_timeval>() - 8usize];
    ["Offset of field: __kernel_sock_timeval::tv_sec"]
        [::std::mem::offset_of!(__kernel_sock_timeval, tv_sec) - 0usize];
    ["Offset of field: __kernel_sock_timeval::tv_usec"]
        [::std::mem::offset_of!(__kernel_sock_timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of open_how"][::std::mem::size_of::<open_how>() - 24usize];
    ["Alignment of open_how"][::std::mem::align_of::<open_how>() - 8usize];
    ["Offset of field: open_how::flags"][::std::mem::offset_of!(open_how, flags) - 0usize];
    ["Offset of field: open_how::mode"][::std::mem::offset_of!(open_how, mode) - 8usize];
    ["Offset of field: open_how::resolve"][::std::mem::offset_of!(open_how, resolve) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_policy_v1 {
    pub version: __u8,
    pub contents_encryption_mode: __u8,
    pub filenames_encryption_mode: __u8,
    pub flags: __u8,
    pub master_key_descriptor: [__u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_policy_v1"][::std::mem::size_of::<fscrypt_policy_v1>() - 12usize];
    ["Alignment of fscrypt_policy_v1"][::std::mem::align_of::<fscrypt_policy_v1>() - 1usize];
    ["Offset of field: fscrypt_policy_v1::version"]
        [::std::mem::offset_of!(fscrypt_policy_v1, version) - 0usize];
    ["Offset of field: fscrypt_policy_v1::contents_encryption_mode"]
        [::std::mem::offset_of!(fscrypt_policy_v1, contents_encryption_mode) - 1usize];
    ["Offset of field: fscrypt_policy_v1::filenames_encryption_mode"]
        [::std::mem::offset_of!(fscrypt_policy_v1, filenames_encryption_mode) - 2usize];
    ["Offset of field: fscrypt_policy_v1::flags"]
        [::std::mem::offset_of!(fscrypt_policy_v1, flags) - 3usize];
    ["Offset of field: fscrypt_policy_v1::master_key_descriptor"]
        [::std::mem::offset_of!(fscrypt_policy_v1, master_key_descriptor) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_key {
    pub mode: __u32,
    pub raw: [__u8; 64usize],
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_key"][::std::mem::size_of::<fscrypt_key>() - 72usize];
    ["Alignment of fscrypt_key"][::std::mem::align_of::<fscrypt_key>() - 4usize];
    ["Offset of field: fscrypt_key::mode"][::std::mem::offset_of!(fscrypt_key, mode) - 0usize];
    ["Offset of field: fscrypt_key::raw"][::std::mem::offset_of!(fscrypt_key, raw) - 4usize];
    ["Offset of field: fscrypt_key::size"][::std::mem::offset_of!(fscrypt_key, size) - 68usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fscrypt_policy_v2 {
    pub version: __u8,
    pub contents_encryption_mode: __u8,
    pub filenames_encryption_mode: __u8,
    pub flags: __u8,
    pub __reserved: [__u8; 4usize],
    pub master_key_identifier: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_policy_v2"][::std::mem::size_of::<fscrypt_policy_v2>() - 24usize];
    ["Alignment of fscrypt_policy_v2"][::std::mem::align_of::<fscrypt_policy_v2>() - 1usize];
    ["Offset of field: fscrypt_policy_v2::version"]
        [::std::mem::offset_of!(fscrypt_policy_v2, version) - 0usize];
    ["Offset of field: fscrypt_policy_v2::contents_encryption_mode"]
        [::std::mem::offset_of!(fscrypt_policy_v2, contents_encryption_mode) - 1usize];
    ["Offset of field: fscrypt_policy_v2::filenames_encryption_mode"]
        [::std::mem::offset_of!(fscrypt_policy_v2, filenames_encryption_mode) - 2usize];
    ["Offset of field: fscrypt_policy_v2::flags"]
        [::std::mem::offset_of!(fscrypt_policy_v2, flags) - 3usize];
    ["Offset of field: fscrypt_policy_v2::__reserved"]
        [::std::mem::offset_of!(fscrypt_policy_v2, __reserved) - 4usize];
    ["Offset of field: fscrypt_policy_v2::master_key_identifier"]
        [::std::mem::offset_of!(fscrypt_policy_v2, master_key_identifier) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_get_policy_ex_arg {
    pub policy_size: __u64,
    pub policy: fscrypt_get_policy_ex_arg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fscrypt_get_policy_ex_arg__bindgen_ty_1 {
    pub version: __u8,
    pub v1: fscrypt_policy_v1,
    pub v2: fscrypt_policy_v2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_get_policy_ex_arg__bindgen_ty_1"]
        [::std::mem::size_of::<fscrypt_get_policy_ex_arg__bindgen_ty_1>() - 24usize];
    ["Alignment of fscrypt_get_policy_ex_arg__bindgen_ty_1"]
        [::std::mem::align_of::<fscrypt_get_policy_ex_arg__bindgen_ty_1>() - 1usize];
    ["Offset of field: fscrypt_get_policy_ex_arg__bindgen_ty_1::version"]
        [::std::mem::offset_of!(fscrypt_get_policy_ex_arg__bindgen_ty_1, version) - 0usize];
    ["Offset of field: fscrypt_get_policy_ex_arg__bindgen_ty_1::v1"]
        [::std::mem::offset_of!(fscrypt_get_policy_ex_arg__bindgen_ty_1, v1) - 0usize];
    ["Offset of field: fscrypt_get_policy_ex_arg__bindgen_ty_1::v2"]
        [::std::mem::offset_of!(fscrypt_get_policy_ex_arg__bindgen_ty_1, v2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_get_policy_ex_arg"]
        [::std::mem::size_of::<fscrypt_get_policy_ex_arg>() - 32usize];
    ["Alignment of fscrypt_get_policy_ex_arg"]
        [::std::mem::align_of::<fscrypt_get_policy_ex_arg>() - 8usize];
    ["Offset of field: fscrypt_get_policy_ex_arg::policy_size"]
        [::std::mem::offset_of!(fscrypt_get_policy_ex_arg, policy_size) - 0usize];
    ["Offset of field: fscrypt_get_policy_ex_arg::policy"]
        [::std::mem::offset_of!(fscrypt_get_policy_ex_arg, policy) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_key_specifier {
    pub type_: __u32,
    pub __reserved: __u32,
    pub u: fscrypt_key_specifier__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union fscrypt_key_specifier__bindgen_ty_1 {
    pub __reserved: [__u8; 32usize],
    pub descriptor: [__u8; 8usize],
    pub identifier: [__u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_key_specifier__bindgen_ty_1"]
        [::std::mem::size_of::<fscrypt_key_specifier__bindgen_ty_1>() - 32usize];
    ["Alignment of fscrypt_key_specifier__bindgen_ty_1"]
        [::std::mem::align_of::<fscrypt_key_specifier__bindgen_ty_1>() - 1usize];
    ["Offset of field: fscrypt_key_specifier__bindgen_ty_1::__reserved"]
        [::std::mem::offset_of!(fscrypt_key_specifier__bindgen_ty_1, __reserved) - 0usize];
    ["Offset of field: fscrypt_key_specifier__bindgen_ty_1::descriptor"]
        [::std::mem::offset_of!(fscrypt_key_specifier__bindgen_ty_1, descriptor) - 0usize];
    ["Offset of field: fscrypt_key_specifier__bindgen_ty_1::identifier"]
        [::std::mem::offset_of!(fscrypt_key_specifier__bindgen_ty_1, identifier) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_key_specifier"][::std::mem::size_of::<fscrypt_key_specifier>() - 40usize];
    ["Alignment of fscrypt_key_specifier"]
        [::std::mem::align_of::<fscrypt_key_specifier>() - 4usize];
    ["Offset of field: fscrypt_key_specifier::type_"]
        [::std::mem::offset_of!(fscrypt_key_specifier, type_) - 0usize];
    ["Offset of field: fscrypt_key_specifier::__reserved"]
        [::std::mem::offset_of!(fscrypt_key_specifier, __reserved) - 4usize];
    ["Offset of field: fscrypt_key_specifier::u"]
        [::std::mem::offset_of!(fscrypt_key_specifier, u) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct fscrypt_provisioning_key_payload {
    pub type_: __u32,
    pub __reserved: __u32,
    pub raw: __IncompleteArrayField<__u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_provisioning_key_payload"]
        [::std::mem::size_of::<fscrypt_provisioning_key_payload>() - 8usize];
    ["Alignment of fscrypt_provisioning_key_payload"]
        [::std::mem::align_of::<fscrypt_provisioning_key_payload>() - 4usize];
    ["Offset of field: fscrypt_provisioning_key_payload::type_"]
        [::std::mem::offset_of!(fscrypt_provisioning_key_payload, type_) - 0usize];
    ["Offset of field: fscrypt_provisioning_key_payload::__reserved"]
        [::std::mem::offset_of!(fscrypt_provisioning_key_payload, __reserved) - 4usize];
    ["Offset of field: fscrypt_provisioning_key_payload::raw"]
        [::std::mem::offset_of!(fscrypt_provisioning_key_payload, raw) - 8usize];
};
#[repr(C)]
pub struct fscrypt_add_key_arg {
    pub key_spec: fscrypt_key_specifier,
    pub raw_size: __u32,
    pub key_id: __u32,
    pub __reserved: [__u32; 8usize],
    pub raw: __IncompleteArrayField<__u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_add_key_arg"][::std::mem::size_of::<fscrypt_add_key_arg>() - 80usize];
    ["Alignment of fscrypt_add_key_arg"][::std::mem::align_of::<fscrypt_add_key_arg>() - 4usize];
    ["Offset of field: fscrypt_add_key_arg::key_spec"]
        [::std::mem::offset_of!(fscrypt_add_key_arg, key_spec) - 0usize];
    ["Offset of field: fscrypt_add_key_arg::raw_size"]
        [::std::mem::offset_of!(fscrypt_add_key_arg, raw_size) - 40usize];
    ["Offset of field: fscrypt_add_key_arg::key_id"]
        [::std::mem::offset_of!(fscrypt_add_key_arg, key_id) - 44usize];
    ["Offset of field: fscrypt_add_key_arg::__reserved"]
        [::std::mem::offset_of!(fscrypt_add_key_arg, __reserved) - 48usize];
    ["Offset of field: fscrypt_add_key_arg::raw"]
        [::std::mem::offset_of!(fscrypt_add_key_arg, raw) - 80usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_remove_key_arg {
    pub key_spec: fscrypt_key_specifier,
    pub removal_status_flags: __u32,
    pub __reserved: [__u32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_remove_key_arg"][::std::mem::size_of::<fscrypt_remove_key_arg>() - 64usize];
    ["Alignment of fscrypt_remove_key_arg"]
        [::std::mem::align_of::<fscrypt_remove_key_arg>() - 4usize];
    ["Offset of field: fscrypt_remove_key_arg::key_spec"]
        [::std::mem::offset_of!(fscrypt_remove_key_arg, key_spec) - 0usize];
    ["Offset of field: fscrypt_remove_key_arg::removal_status_flags"]
        [::std::mem::offset_of!(fscrypt_remove_key_arg, removal_status_flags) - 40usize];
    ["Offset of field: fscrypt_remove_key_arg::__reserved"]
        [::std::mem::offset_of!(fscrypt_remove_key_arg, __reserved) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fscrypt_get_key_status_arg {
    pub key_spec: fscrypt_key_specifier,
    pub __reserved: [__u32; 6usize],
    pub status: __u32,
    pub status_flags: __u32,
    pub user_count: __u32,
    pub __out_reserved: [__u32; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fscrypt_get_key_status_arg"]
        [::std::mem::size_of::<fscrypt_get_key_status_arg>() - 128usize];
    ["Alignment of fscrypt_get_key_status_arg"]
        [::std::mem::align_of::<fscrypt_get_key_status_arg>() - 4usize];
    ["Offset of field: fscrypt_get_key_status_arg::key_spec"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, key_spec) - 0usize];
    ["Offset of field: fscrypt_get_key_status_arg::__reserved"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, __reserved) - 40usize];
    ["Offset of field: fscrypt_get_key_status_arg::status"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, status) - 64usize];
    ["Offset of field: fscrypt_get_key_status_arg::status_flags"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, status_flags) - 68usize];
    ["Offset of field: fscrypt_get_key_status_arg::user_count"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, user_count) - 72usize];
    ["Offset of field: fscrypt_get_key_status_arg::__out_reserved"]
        [::std::mem::offset_of!(fscrypt_get_key_status_arg, __out_reserved) - 76usize];
};
pub const fsconfig_command_FSCONFIG_SET_FLAG: fsconfig_command = 0;
pub const fsconfig_command_FSCONFIG_SET_STRING: fsconfig_command = 1;
pub const fsconfig_command_FSCONFIG_SET_BINARY: fsconfig_command = 2;
pub const fsconfig_command_FSCONFIG_SET_PATH: fsconfig_command = 3;
pub const fsconfig_command_FSCONFIG_SET_PATH_EMPTY: fsconfig_command = 4;
pub const fsconfig_command_FSCONFIG_SET_FD: fsconfig_command = 5;
pub const fsconfig_command_FSCONFIG_CMD_CREATE: fsconfig_command = 6;
pub const fsconfig_command_FSCONFIG_CMD_RECONFIGURE: fsconfig_command = 7;
pub type fsconfig_command = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mount_attr {
    pub attr_set: __u64,
    pub attr_clr: __u64,
    pub propagation: __u64,
    pub userns_fd: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mount_attr"][::std::mem::size_of::<mount_attr>() - 32usize];
    ["Alignment of mount_attr"][::std::mem::align_of::<mount_attr>() - 8usize];
    ["Offset of field: mount_attr::attr_set"]
        [::std::mem::offset_of!(mount_attr, attr_set) - 0usize];
    ["Offset of field: mount_attr::attr_clr"]
        [::std::mem::offset_of!(mount_attr, attr_clr) - 8usize];
    ["Offset of field: mount_attr::propagation"]
        [::std::mem::offset_of!(mount_attr, propagation) - 16usize];
    ["Offset of field: mount_attr::userns_fd"]
        [::std::mem::offset_of!(mount_attr, userns_fd) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_clone_range {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_clone_range"][::std::mem::size_of::<file_clone_range>() - 32usize];
    ["Alignment of file_clone_range"][::std::mem::align_of::<file_clone_range>() - 8usize];
    ["Offset of field: file_clone_range::src_fd"]
        [::std::mem::offset_of!(file_clone_range, src_fd) - 0usize];
    ["Offset of field: file_clone_range::src_offset"]
        [::std::mem::offset_of!(file_clone_range, src_offset) - 8usize];
    ["Offset of field: file_clone_range::src_length"]
        [::std::mem::offset_of!(file_clone_range, src_length) - 16usize];
    ["Offset of field: file_clone_range::dest_offset"]
        [::std::mem::offset_of!(file_clone_range, dest_offset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fstrim_range {
    pub start: __u64,
    pub len: __u64,
    pub minlen: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fstrim_range"][::std::mem::size_of::<fstrim_range>() - 24usize];
    ["Alignment of fstrim_range"][::std::mem::align_of::<fstrim_range>() - 8usize];
    ["Offset of field: fstrim_range::start"][::std::mem::offset_of!(fstrim_range, start) - 0usize];
    ["Offset of field: fstrim_range::len"][::std::mem::offset_of!(fstrim_range, len) - 8usize];
    ["Offset of field: fstrim_range::minlen"]
        [::std::mem::offset_of!(fstrim_range, minlen) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_dedupe_range_info {
    pub dest_fd: __s64,
    pub dest_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_dedupe_range_info"][::std::mem::size_of::<file_dedupe_range_info>() - 32usize];
    ["Alignment of file_dedupe_range_info"]
        [::std::mem::align_of::<file_dedupe_range_info>() - 8usize];
    ["Offset of field: file_dedupe_range_info::dest_fd"]
        [::std::mem::offset_of!(file_dedupe_range_info, dest_fd) - 0usize];
    ["Offset of field: file_dedupe_range_info::dest_offset"]
        [::std::mem::offset_of!(file_dedupe_range_info, dest_offset) - 8usize];
    ["Offset of field: file_dedupe_range_info::bytes_deduped"]
        [::std::mem::offset_of!(file_dedupe_range_info, bytes_deduped) - 16usize];
    ["Offset of field: file_dedupe_range_info::status"]
        [::std::mem::offset_of!(file_dedupe_range_info, status) - 24usize];
    ["Offset of field: file_dedupe_range_info::reserved"]
        [::std::mem::offset_of!(file_dedupe_range_info, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct file_dedupe_range {
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<file_dedupe_range_info>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of file_dedupe_range"][::std::mem::size_of::<file_dedupe_range>() - 24usize];
    ["Alignment of file_dedupe_range"][::std::mem::align_of::<file_dedupe_range>() - 8usize];
    ["Offset of field: file_dedupe_range::src_offset"]
        [::std::mem::offset_of!(file_dedupe_range, src_offset) - 0usize];
    ["Offset of field: file_dedupe_range::src_length"]
        [::std::mem::offset_of!(file_dedupe_range, src_length) - 8usize];
    ["Offset of field: file_dedupe_range::dest_count"]
        [::std::mem::offset_of!(file_dedupe_range, dest_count) - 16usize];
    ["Offset of field: file_dedupe_range::reserved1"]
        [::std::mem::offset_of!(file_dedupe_range, reserved1) - 18usize];
    ["Offset of field: file_dedupe_range::reserved2"]
        [::std::mem::offset_of!(file_dedupe_range, reserved2) - 20usize];
    ["Offset of field: file_dedupe_range::info"]
        [::std::mem::offset_of!(file_dedupe_range, info) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct files_stat_struct {
    pub nr_files: ::std::os::raw::c_ulong,
    pub nr_free_files: ::std::os::raw::c_ulong,
    pub max_files: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of files_stat_struct"][::std::mem::size_of::<files_stat_struct>() - 24usize];
    ["Alignment of files_stat_struct"][::std::mem::align_of::<files_stat_struct>() - 8usize];
    ["Offset of field: files_stat_struct::nr_files"]
        [::std::mem::offset_of!(files_stat_struct, nr_files) - 0usize];
    ["Offset of field: files_stat_struct::nr_free_files"]
        [::std::mem::offset_of!(files_stat_struct, nr_free_files) - 8usize];
    ["Offset of field: files_stat_struct::max_files"]
        [::std::mem::offset_of!(files_stat_struct, max_files) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inodes_stat_t {
    pub nr_inodes: ::std::os::raw::c_long,
    pub nr_unused: ::std::os::raw::c_long,
    pub dummy: [::std::os::raw::c_long; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of inodes_stat_t"][::std::mem::size_of::<inodes_stat_t>() - 56usize];
    ["Alignment of inodes_stat_t"][::std::mem::align_of::<inodes_stat_t>() - 8usize];
    ["Offset of field: inodes_stat_t::nr_inodes"]
        [::std::mem::offset_of!(inodes_stat_t, nr_inodes) - 0usize];
    ["Offset of field: inodes_stat_t::nr_unused"]
        [::std::mem::offset_of!(inodes_stat_t, nr_unused) - 8usize];
    ["Offset of field: inodes_stat_t::dummy"]
        [::std::mem::offset_of!(inodes_stat_t, dummy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsxattr {
    pub fsx_xflags: __u32,
    pub fsx_extsize: __u32,
    pub fsx_nextents: __u32,
    pub fsx_projid: __u32,
    pub fsx_cowextsize: __u32,
    pub fsx_pad: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fsxattr"][::std::mem::size_of::<fsxattr>() - 28usize];
    ["Alignment of fsxattr"][::std::mem::align_of::<fsxattr>() - 4usize];
    ["Offset of field: fsxattr::fsx_xflags"][::std::mem::offset_of!(fsxattr, fsx_xflags) - 0usize];
    ["Offset of field: fsxattr::fsx_extsize"]
        [::std::mem::offset_of!(fsxattr, fsx_extsize) - 4usize];
    ["Offset of field: fsxattr::fsx_nextents"]
        [::std::mem::offset_of!(fsxattr, fsx_nextents) - 8usize];
    ["Offset of field: fsxattr::fsx_projid"][::std::mem::offset_of!(fsxattr, fsx_projid) - 12usize];
    ["Offset of field: fsxattr::fsx_cowextsize"]
        [::std::mem::offset_of!(fsxattr, fsx_cowextsize) - 16usize];
    ["Offset of field: fsxattr::fsx_pad"][::std::mem::offset_of!(fsxattr, fsx_pad) - 20usize];
};
pub type __kernel_rwf_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct io_uring_sqe {
    pub opcode: __u8,
    pub flags: __u8,
    pub ioprio: __u16,
    pub fd: __s32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
    pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
    pub len: __u32,
    pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
    pub user_data: __u64,
    pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
    pub personality: __u16,
    pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
    pub __bindgen_anon_6: io_uring_sqe__bindgen_ty_6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_1 {
    pub off: __u64,
    pub addr2: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_1__bindgen_ty_1 {
    pub cmd_op: __u32,
    pub __pad1: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1__bindgen_ty_1::cmd_op"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1, cmd_op) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1__bindgen_ty_1::__pad1"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1, __pad1) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_1>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1::off"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1, off) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_1::addr2"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_1, addr2) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_2 {
    pub addr: __u64,
    pub splice_off_in: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_2__bindgen_ty_1 {
    pub level: __u32,
    pub optname: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2__bindgen_ty_1::level"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1, level) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2__bindgen_ty_1::optname"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2__bindgen_ty_1, optname) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_2"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_2>() - 8usize];
    ["Alignment of io_uring_sqe__bindgen_ty_2"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_2>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2::addr"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2, addr) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_2::splice_off_in"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_2, splice_off_in) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_3 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: __u32,
    pub poll_events: __u16,
    pub poll32_events: __u32,
    pub sync_range_flags: __u32,
    pub msg_flags: __u32,
    pub timeout_flags: __u32,
    pub accept_flags: __u32,
    pub cancel_flags: __u32,
    pub open_flags: __u32,
    pub statx_flags: __u32,
    pub fadvise_advice: __u32,
    pub splice_flags: __u32,
    pub rename_flags: __u32,
    pub unlink_flags: __u32,
    pub hardlink_flags: __u32,
    pub xattr_flags: __u32,
    pub msg_ring_flags: __u32,
    pub uring_cmd_flags: __u32,
    pub waitid_flags: __u32,
    pub futex_flags: __u32,
    pub install_fd_flags: __u32,
    pub nop_flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_3"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_3>() - 4usize];
    ["Alignment of io_uring_sqe__bindgen_ty_3"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_3>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::rw_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, rw_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::fsync_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, fsync_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::poll_events"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, poll_events) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::poll32_events"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, poll32_events) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::sync_range_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, sync_range_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::msg_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, msg_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::timeout_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, timeout_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::accept_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, accept_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::cancel_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, cancel_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::open_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, open_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::statx_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, statx_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::fadvise_advice"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, fadvise_advice) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::splice_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, splice_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::rename_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, rename_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::unlink_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, unlink_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::hardlink_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, hardlink_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::xattr_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, xattr_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::msg_ring_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, msg_ring_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::uring_cmd_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, uring_cmd_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::waitid_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, waitid_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::futex_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, futex_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::install_fd_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, install_fd_flags) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_3::nop_flags"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_3, nop_flags) - 0usize];
};
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_4 {
    pub buf_index: __u16,
    pub buf_group: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_4"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_4>() - 2usize];
    ["Alignment of io_uring_sqe__bindgen_ty_4"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_4>() - 1usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_4::buf_index"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_4, buf_index) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_4::buf_group"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_4, buf_group) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_5 {
    pub splice_fd_in: __s32,
    pub file_index: __u32,
    pub zcrx_ifq_idx: __u32,
    pub optlen: __u32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_5__bindgen_ty_1 {
    pub addr_len: __u16,
    pub __pad3: [__u16; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_5__bindgen_ty_1>() - 4usize];
    ["Alignment of io_uring_sqe__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_5__bindgen_ty_1>() - 2usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5__bindgen_ty_1::addr_len"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1, addr_len) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5__bindgen_ty_1::__pad3"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5__bindgen_ty_1, __pad3) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_5"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_5>() - 4usize];
    ["Alignment of io_uring_sqe__bindgen_ty_5"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_5>() - 4usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::splice_fd_in"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, splice_fd_in) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::file_index"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, file_index) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::zcrx_ifq_idx"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, zcrx_ifq_idx) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_5::optlen"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_5, optlen) - 0usize];
};
#[repr(C)]
pub struct io_uring_sqe__bindgen_ty_6 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>,
    pub optval: __BindgenUnionField<__u64>,
    pub cmd: __BindgenUnionField<[__u8; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_6__bindgen_ty_1 {
    pub addr3: __u64,
    pub __pad2: [__u64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>() - 16usize];
    ["Alignment of io_uring_sqe__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_6__bindgen_ty_1::addr3"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1, addr3) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_6__bindgen_ty_1::__pad2"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1, __pad2) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe__bindgen_ty_6"]
        [::std::mem::size_of::<io_uring_sqe__bindgen_ty_6>() - 16usize];
    ["Alignment of io_uring_sqe__bindgen_ty_6"]
        [::std::mem::align_of::<io_uring_sqe__bindgen_ty_6>() - 8usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_6::optval"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_6, optval) - 0usize];
    ["Offset of field: io_uring_sqe__bindgen_ty_6::cmd"]
        [::std::mem::offset_of!(io_uring_sqe__bindgen_ty_6, cmd) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sqe"][::std::mem::size_of::<io_uring_sqe>() - 64usize];
    ["Alignment of io_uring_sqe"][::std::mem::align_of::<io_uring_sqe>() - 8usize];
    ["Offset of field: io_uring_sqe::opcode"]
        [::std::mem::offset_of!(io_uring_sqe, opcode) - 0usize];
    ["Offset of field: io_uring_sqe::flags"][::std::mem::offset_of!(io_uring_sqe, flags) - 1usize];
    ["Offset of field: io_uring_sqe::ioprio"]
        [::std::mem::offset_of!(io_uring_sqe, ioprio) - 2usize];
    ["Offset of field: io_uring_sqe::fd"][::std::mem::offset_of!(io_uring_sqe, fd) - 4usize];
    ["Offset of field: io_uring_sqe::len"][::std::mem::offset_of!(io_uring_sqe, len) - 24usize];
    ["Offset of field: io_uring_sqe::user_data"]
        [::std::mem::offset_of!(io_uring_sqe, user_data) - 32usize];
    ["Offset of field: io_uring_sqe::personality"]
        [::std::mem::offset_of!(io_uring_sqe, personality) - 42usize];
};
pub const io_uring_sqe_flags_bit_IOSQE_FIXED_FILE_BIT: io_uring_sqe_flags_bit = 0;
pub const io_uring_sqe_flags_bit_IOSQE_IO_DRAIN_BIT: io_uring_sqe_flags_bit = 1;
pub const io_uring_sqe_flags_bit_IOSQE_IO_LINK_BIT: io_uring_sqe_flags_bit = 2;
pub const io_uring_sqe_flags_bit_IOSQE_IO_HARDLINK_BIT: io_uring_sqe_flags_bit = 3;
pub const io_uring_sqe_flags_bit_IOSQE_ASYNC_BIT: io_uring_sqe_flags_bit = 4;
pub const io_uring_sqe_flags_bit_IOSQE_BUFFER_SELECT_BIT: io_uring_sqe_flags_bit = 5;
pub const io_uring_sqe_flags_bit_IOSQE_CQE_SKIP_SUCCESS_BIT: io_uring_sqe_flags_bit = 6;
pub type io_uring_sqe_flags_bit = ::std::os::raw::c_uint;
pub const io_uring_op_IORING_OP_NOP: io_uring_op = 0;
pub const io_uring_op_IORING_OP_READV: io_uring_op = 1;
pub const io_uring_op_IORING_OP_WRITEV: io_uring_op = 2;
pub const io_uring_op_IORING_OP_FSYNC: io_uring_op = 3;
pub const io_uring_op_IORING_OP_READ_FIXED: io_uring_op = 4;
pub const io_uring_op_IORING_OP_WRITE_FIXED: io_uring_op = 5;
pub const io_uring_op_IORING_OP_POLL_ADD: io_uring_op = 6;
pub const io_uring_op_IORING_OP_POLL_REMOVE: io_uring_op = 7;
pub const io_uring_op_IORING_OP_SYNC_FILE_RANGE: io_uring_op = 8;
pub const io_uring_op_IORING_OP_SENDMSG: io_uring_op = 9;
pub const io_uring_op_IORING_OP_RECVMSG: io_uring_op = 10;
pub const io_uring_op_IORING_OP_TIMEOUT: io_uring_op = 11;
pub const io_uring_op_IORING_OP_TIMEOUT_REMOVE: io_uring_op = 12;
pub const io_uring_op_IORING_OP_ACCEPT: io_uring_op = 13;
pub const io_uring_op_IORING_OP_ASYNC_CANCEL: io_uring_op = 14;
pub const io_uring_op_IORING_OP_LINK_TIMEOUT: io_uring_op = 15;
pub const io_uring_op_IORING_OP_CONNECT: io_uring_op = 16;
pub const io_uring_op_IORING_OP_FALLOCATE: io_uring_op = 17;
pub const io_uring_op_IORING_OP_OPENAT: io_uring_op = 18;
pub const io_uring_op_IORING_OP_CLOSE: io_uring_op = 19;
pub const io_uring_op_IORING_OP_FILES_UPDATE: io_uring_op = 20;
pub const io_uring_op_IORING_OP_STATX: io_uring_op = 21;
pub const io_uring_op_IORING_OP_READ: io_uring_op = 22;
pub const io_uring_op_IORING_OP_WRITE: io_uring_op = 23;
pub const io_uring_op_IORING_OP_FADVISE: io_uring_op = 24;
pub const io_uring_op_IORING_OP_MADVISE: io_uring_op = 25;
pub const io_uring_op_IORING_OP_SEND: io_uring_op = 26;
pub const io_uring_op_IORING_OP_RECV: io_uring_op = 27;
pub const io_uring_op_IORING_OP_OPENAT2: io_uring_op = 28;
pub const io_uring_op_IORING_OP_EPOLL_CTL: io_uring_op = 29;
pub const io_uring_op_IORING_OP_SPLICE: io_uring_op = 30;
pub const io_uring_op_IORING_OP_PROVIDE_BUFFERS: io_uring_op = 31;
pub const io_uring_op_IORING_OP_REMOVE_BUFFERS: io_uring_op = 32;
pub const io_uring_op_IORING_OP_TEE: io_uring_op = 33;
pub const io_uring_op_IORING_OP_SHUTDOWN: io_uring_op = 34;
pub const io_uring_op_IORING_OP_RENAMEAT: io_uring_op = 35;
pub const io_uring_op_IORING_OP_UNLINKAT: io_uring_op = 36;
pub const io_uring_op_IORING_OP_MKDIRAT: io_uring_op = 37;
pub const io_uring_op_IORING_OP_SYMLINKAT: io_uring_op = 38;
pub const io_uring_op_IORING_OP_LINKAT: io_uring_op = 39;
pub const io_uring_op_IORING_OP_MSG_RING: io_uring_op = 40;
pub const io_uring_op_IORING_OP_FSETXATTR: io_uring_op = 41;
pub const io_uring_op_IORING_OP_SETXATTR: io_uring_op = 42;
pub const io_uring_op_IORING_OP_FGETXATTR: io_uring_op = 43;
pub const io_uring_op_IORING_OP_GETXATTR: io_uring_op = 44;
pub const io_uring_op_IORING_OP_SOCKET: io_uring_op = 45;
pub const io_uring_op_IORING_OP_URING_CMD: io_uring_op = 46;
pub const io_uring_op_IORING_OP_SEND_ZC: io_uring_op = 47;
pub const io_uring_op_IORING_OP_SENDMSG_ZC: io_uring_op = 48;
pub const io_uring_op_IORING_OP_READ_MULTISHOT: io_uring_op = 49;
pub const io_uring_op_IORING_OP_WAITID: io_uring_op = 50;
pub const io_uring_op_IORING_OP_FUTEX_WAIT: io_uring_op = 51;
pub const io_uring_op_IORING_OP_FUTEX_WAKE: io_uring_op = 52;
pub const io_uring_op_IORING_OP_FUTEX_WAITV: io_uring_op = 53;
pub const io_uring_op_IORING_OP_FIXED_FD_INSTALL: io_uring_op = 54;
pub const io_uring_op_IORING_OP_FTRUNCATE: io_uring_op = 55;
pub const io_uring_op_IORING_OP_BIND: io_uring_op = 56;
pub const io_uring_op_IORING_OP_LISTEN: io_uring_op = 57;
pub const io_uring_op_IORING_OP_RECV_ZC: io_uring_op = 58;
pub const io_uring_op_IORING_OP_EPOLL_WAIT: io_uring_op = 59;
pub const io_uring_op_IORING_OP_READV_FIXED: io_uring_op = 60;
pub const io_uring_op_IORING_OP_WRITEV_FIXED: io_uring_op = 61;
pub const io_uring_op_IORING_OP_LAST: io_uring_op = 62;
pub type io_uring_op = ::std::os::raw::c_uint;
pub const io_uring_msg_ring_flags_IORING_MSG_DATA: io_uring_msg_ring_flags = 0;
pub const io_uring_msg_ring_flags_IORING_MSG_SEND_FD: io_uring_msg_ring_flags = 1;
pub type io_uring_msg_ring_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct io_uring_cqe {
    pub user_data: __u64,
    pub res: __s32,
    pub flags: __u32,
    pub big_cqe: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_cqe"][::std::mem::size_of::<io_uring_cqe>() - 16usize];
    ["Alignment of io_uring_cqe"][::std::mem::align_of::<io_uring_cqe>() - 8usize];
    ["Offset of field: io_uring_cqe::user_data"]
        [::std::mem::offset_of!(io_uring_cqe, user_data) - 0usize];
    ["Offset of field: io_uring_cqe::res"][::std::mem::offset_of!(io_uring_cqe, res) - 8usize];
    ["Offset of field: io_uring_cqe::flags"][::std::mem::offset_of!(io_uring_cqe, flags) - 12usize];
    ["Offset of field: io_uring_cqe::big_cqe"]
        [::std::mem::offset_of!(io_uring_cqe, big_cqe) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_sqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub flags: __u32,
    pub dropped: __u32,
    pub array: __u32,
    pub resv1: __u32,
    pub user_addr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_sqring_offsets"][::std::mem::size_of::<io_sqring_offsets>() - 40usize];
    ["Alignment of io_sqring_offsets"][::std::mem::align_of::<io_sqring_offsets>() - 8usize];
    ["Offset of field: io_sqring_offsets::head"]
        [::std::mem::offset_of!(io_sqring_offsets, head) - 0usize];
    ["Offset of field: io_sqring_offsets::tail"]
        [::std::mem::offset_of!(io_sqring_offsets, tail) - 4usize];
    ["Offset of field: io_sqring_offsets::ring_mask"]
        [::std::mem::offset_of!(io_sqring_offsets, ring_mask) - 8usize];
    ["Offset of field: io_sqring_offsets::ring_entries"]
        [::std::mem::offset_of!(io_sqring_offsets, ring_entries) - 12usize];
    ["Offset of field: io_sqring_offsets::flags"]
        [::std::mem::offset_of!(io_sqring_offsets, flags) - 16usize];
    ["Offset of field: io_sqring_offsets::dropped"]
        [::std::mem::offset_of!(io_sqring_offsets, dropped) - 20usize];
    ["Offset of field: io_sqring_offsets::array"]
        [::std::mem::offset_of!(io_sqring_offsets, array) - 24usize];
    ["Offset of field: io_sqring_offsets::resv1"]
        [::std::mem::offset_of!(io_sqring_offsets, resv1) - 28usize];
    ["Offset of field: io_sqring_offsets::user_addr"]
        [::std::mem::offset_of!(io_sqring_offsets, user_addr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_cqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub overflow: __u32,
    pub cqes: __u32,
    pub flags: __u32,
    pub resv1: __u32,
    pub user_addr: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_cqring_offsets"][::std::mem::size_of::<io_cqring_offsets>() - 40usize];
    ["Alignment of io_cqring_offsets"][::std::mem::align_of::<io_cqring_offsets>() - 8usize];
    ["Offset of field: io_cqring_offsets::head"]
        [::std::mem::offset_of!(io_cqring_offsets, head) - 0usize];
    ["Offset of field: io_cqring_offsets::tail"]
        [::std::mem::offset_of!(io_cqring_offsets, tail) - 4usize];
    ["Offset of field: io_cqring_offsets::ring_mask"]
        [::std::mem::offset_of!(io_cqring_offsets, ring_mask) - 8usize];
    ["Offset of field: io_cqring_offsets::ring_entries"]
        [::std::mem::offset_of!(io_cqring_offsets, ring_entries) - 12usize];
    ["Offset of field: io_cqring_offsets::overflow"]
        [::std::mem::offset_of!(io_cqring_offsets, overflow) - 16usize];
    ["Offset of field: io_cqring_offsets::cqes"]
        [::std::mem::offset_of!(io_cqring_offsets, cqes) - 20usize];
    ["Offset of field: io_cqring_offsets::flags"]
        [::std::mem::offset_of!(io_cqring_offsets, flags) - 24usize];
    ["Offset of field: io_cqring_offsets::resv1"]
        [::std::mem::offset_of!(io_cqring_offsets, resv1) - 28usize];
    ["Offset of field: io_cqring_offsets::user_addr"]
        [::std::mem::offset_of!(io_cqring_offsets, user_addr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_params {
    pub sq_entries: __u32,
    pub cq_entries: __u32,
    pub flags: __u32,
    pub sq_thread_cpu: __u32,
    pub sq_thread_idle: __u32,
    pub features: __u32,
    pub wq_fd: __u32,
    pub resv: [__u32; 3usize],
    pub sq_off: io_sqring_offsets,
    pub cq_off: io_cqring_offsets,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_params"][::std::mem::size_of::<io_uring_params>() - 120usize];
    ["Alignment of io_uring_params"][::std::mem::align_of::<io_uring_params>() - 8usize];
    ["Offset of field: io_uring_params::sq_entries"]
        [::std::mem::offset_of!(io_uring_params, sq_entries) - 0usize];
    ["Offset of field: io_uring_params::cq_entries"]
        [::std::mem::offset_of!(io_uring_params, cq_entries) - 4usize];
    ["Offset of field: io_uring_params::flags"]
        [::std::mem::offset_of!(io_uring_params, flags) - 8usize];
    ["Offset of field: io_uring_params::sq_thread_cpu"]
        [::std::mem::offset_of!(io_uring_params, sq_thread_cpu) - 12usize];
    ["Offset of field: io_uring_params::sq_thread_idle"]
        [::std::mem::offset_of!(io_uring_params, sq_thread_idle) - 16usize];
    ["Offset of field: io_uring_params::features"]
        [::std::mem::offset_of!(io_uring_params, features) - 20usize];
    ["Offset of field: io_uring_params::wq_fd"]
        [::std::mem::offset_of!(io_uring_params, wq_fd) - 24usize];
    ["Offset of field: io_uring_params::resv"]
        [::std::mem::offset_of!(io_uring_params, resv) - 28usize];
    ["Offset of field: io_uring_params::sq_off"]
        [::std::mem::offset_of!(io_uring_params, sq_off) - 40usize];
    ["Offset of field: io_uring_params::cq_off"]
        [::std::mem::offset_of!(io_uring_params, cq_off) - 80usize];
};
pub const io_uring_register_op_IORING_REGISTER_BUFFERS: io_uring_register_op = 0;
pub const io_uring_register_op_IORING_UNREGISTER_BUFFERS: io_uring_register_op = 1;
pub const io_uring_register_op_IORING_REGISTER_FILES: io_uring_register_op = 2;
pub const io_uring_register_op_IORING_UNREGISTER_FILES: io_uring_register_op = 3;
pub const io_uring_register_op_IORING_REGISTER_EVENTFD: io_uring_register_op = 4;
pub const io_uring_register_op_IORING_UNREGISTER_EVENTFD: io_uring_register_op = 5;
pub const io_uring_register_op_IORING_REGISTER_FILES_UPDATE: io_uring_register_op = 6;
pub const io_uring_register_op_IORING_REGISTER_EVENTFD_ASYNC: io_uring_register_op = 7;
pub const io_uring_register_op_IORING_REGISTER_PROBE: io_uring_register_op = 8;
pub const io_uring_register_op_IORING_REGISTER_PERSONALITY: io_uring_register_op = 9;
pub const io_uring_register_op_IORING_UNREGISTER_PERSONALITY: io_uring_register_op = 10;
pub const io_uring_register_op_IORING_REGISTER_RESTRICTIONS: io_uring_register_op = 11;
pub const io_uring_register_op_IORING_REGISTER_ENABLE_RINGS: io_uring_register_op = 12;
pub const io_uring_register_op_IORING_REGISTER_FILES2: io_uring_register_op = 13;
pub const io_uring_register_op_IORING_REGISTER_FILES_UPDATE2: io_uring_register_op = 14;
pub const io_uring_register_op_IORING_REGISTER_BUFFERS2: io_uring_register_op = 15;
pub const io_uring_register_op_IORING_REGISTER_BUFFERS_UPDATE: io_uring_register_op = 16;
pub const io_uring_register_op_IORING_REGISTER_IOWQ_AFF: io_uring_register_op = 17;
pub const io_uring_register_op_IORING_UNREGISTER_IOWQ_AFF: io_uring_register_op = 18;
pub const io_uring_register_op_IORING_REGISTER_IOWQ_MAX_WORKERS: io_uring_register_op = 19;
pub const io_uring_register_op_IORING_REGISTER_RING_FDS: io_uring_register_op = 20;
pub const io_uring_register_op_IORING_UNREGISTER_RING_FDS: io_uring_register_op = 21;
pub const io_uring_register_op_IORING_REGISTER_PBUF_RING: io_uring_register_op = 22;
pub const io_uring_register_op_IORING_UNREGISTER_PBUF_RING: io_uring_register_op = 23;
pub const io_uring_register_op_IORING_REGISTER_SYNC_CANCEL: io_uring_register_op = 24;
pub const io_uring_register_op_IORING_REGISTER_FILE_ALLOC_RANGE: io_uring_register_op = 25;
pub const io_uring_register_op_IORING_REGISTER_PBUF_STATUS: io_uring_register_op = 26;
pub const io_uring_register_op_IORING_REGISTER_NAPI: io_uring_register_op = 27;
pub const io_uring_register_op_IORING_UNREGISTER_NAPI: io_uring_register_op = 28;
pub const io_uring_register_op_IORING_REGISTER_CLOCK: io_uring_register_op = 29;
pub const io_uring_register_op_IORING_REGISTER_CLONE_BUFFERS: io_uring_register_op = 30;
pub const io_uring_register_op_IORING_REGISTER_SEND_MSG_RING: io_uring_register_op = 31;
pub const io_uring_register_op_IORING_REGISTER_ZCRX_IFQ: io_uring_register_op = 32;
pub const io_uring_register_op_IORING_REGISTER_RESIZE_RINGS: io_uring_register_op = 33;
pub const io_uring_register_op_IORING_REGISTER_MEM_REGION: io_uring_register_op = 34;
pub const io_uring_register_op_IORING_REGISTER_LAST: io_uring_register_op = 35;
pub const io_uring_register_op_IORING_REGISTER_USE_REGISTERED_RING: io_uring_register_op =
    2147483648;
pub type io_uring_register_op = ::std::os::raw::c_uint;
pub const io_wq_type_IO_WQ_BOUND: io_wq_type = 0;
pub const io_wq_type_IO_WQ_UNBOUND: io_wq_type = 1;
pub type io_wq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_files_update {
    pub offset: __u32,
    pub resv: __u32,
    pub fds: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_files_update"][::std::mem::size_of::<io_uring_files_update>() - 16usize];
    ["Alignment of io_uring_files_update"]
        [::std::mem::align_of::<io_uring_files_update>() - 8usize];
    ["Offset of field: io_uring_files_update::offset"]
        [::std::mem::offset_of!(io_uring_files_update, offset) - 0usize];
    ["Offset of field: io_uring_files_update::resv"]
        [::std::mem::offset_of!(io_uring_files_update, resv) - 4usize];
    ["Offset of field: io_uring_files_update::fds"]
        [::std::mem::offset_of!(io_uring_files_update, fds) - 8usize];
};
pub const IORING_MEM_REGION_TYPE_USER: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_region_desc {
    pub user_addr: __u64,
    pub size: __u64,
    pub flags: __u32,
    pub id: __u32,
    pub mmap_offset: __u64,
    pub __resv: [__u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_region_desc"][::std::mem::size_of::<io_uring_region_desc>() - 64usize];
    ["Alignment of io_uring_region_desc"][::std::mem::align_of::<io_uring_region_desc>() - 8usize];
    ["Offset of field: io_uring_region_desc::user_addr"]
        [::std::mem::offset_of!(io_uring_region_desc, user_addr) - 0usize];
    ["Offset of field: io_uring_region_desc::size"]
        [::std::mem::offset_of!(io_uring_region_desc, size) - 8usize];
    ["Offset of field: io_uring_region_desc::flags"]
        [::std::mem::offset_of!(io_uring_region_desc, flags) - 16usize];
    ["Offset of field: io_uring_region_desc::id"]
        [::std::mem::offset_of!(io_uring_region_desc, id) - 20usize];
    ["Offset of field: io_uring_region_desc::mmap_offset"]
        [::std::mem::offset_of!(io_uring_region_desc, mmap_offset) - 24usize];
    ["Offset of field: io_uring_region_desc::__resv"]
        [::std::mem::offset_of!(io_uring_region_desc, __resv) - 32usize];
};
pub const IORING_MEM_REGION_REG_WAIT_ARG: _bindgen_ty_14 = 1;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_mem_region_reg {
    pub region_uptr: __u64,
    pub flags: __u64,
    pub __resv: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_mem_region_reg"][::std::mem::size_of::<io_uring_mem_region_reg>() - 32usize];
    ["Alignment of io_uring_mem_region_reg"]
        [::std::mem::align_of::<io_uring_mem_region_reg>() - 8usize];
    ["Offset of field: io_uring_mem_region_reg::region_uptr"]
        [::std::mem::offset_of!(io_uring_mem_region_reg, region_uptr) - 0usize];
    ["Offset of field: io_uring_mem_region_reg::flags"]
        [::std::mem::offset_of!(io_uring_mem_region_reg, flags) - 8usize];
    ["Offset of field: io_uring_mem_region_reg::__resv"]
        [::std::mem::offset_of!(io_uring_mem_region_reg, __resv) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_register {
    pub nr: __u32,
    pub flags: __u32,
    pub resv2: __u64,
    pub data: __u64,
    pub tags: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_register"][::std::mem::size_of::<io_uring_rsrc_register>() - 32usize];
    ["Alignment of io_uring_rsrc_register"]
        [::std::mem::align_of::<io_uring_rsrc_register>() - 8usize];
    ["Offset of field: io_uring_rsrc_register::nr"]
        [::std::mem::offset_of!(io_uring_rsrc_register, nr) - 0usize];
    ["Offset of field: io_uring_rsrc_register::flags"]
        [::std::mem::offset_of!(io_uring_rsrc_register, flags) - 4usize];
    ["Offset of field: io_uring_rsrc_register::resv2"]
        [::std::mem::offset_of!(io_uring_rsrc_register, resv2) - 8usize];
    ["Offset of field: io_uring_rsrc_register::data"]
        [::std::mem::offset_of!(io_uring_rsrc_register, data) - 16usize];
    ["Offset of field: io_uring_rsrc_register::tags"]
        [::std::mem::offset_of!(io_uring_rsrc_register, tags) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_update {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_update"][::std::mem::size_of::<io_uring_rsrc_update>() - 16usize];
    ["Alignment of io_uring_rsrc_update"][::std::mem::align_of::<io_uring_rsrc_update>() - 8usize];
    ["Offset of field: io_uring_rsrc_update::offset"]
        [::std::mem::offset_of!(io_uring_rsrc_update, offset) - 0usize];
    ["Offset of field: io_uring_rsrc_update::resv"]
        [::std::mem::offset_of!(io_uring_rsrc_update, resv) - 4usize];
    ["Offset of field: io_uring_rsrc_update::data"]
        [::std::mem::offset_of!(io_uring_rsrc_update, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_rsrc_update2 {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
    pub tags: __u64,
    pub nr: __u32,
    pub resv2: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_rsrc_update2"][::std::mem::size_of::<io_uring_rsrc_update2>() - 32usize];
    ["Alignment of io_uring_rsrc_update2"]
        [::std::mem::align_of::<io_uring_rsrc_update2>() - 8usize];
    ["Offset of field: io_uring_rsrc_update2::offset"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, offset) - 0usize];
    ["Offset of field: io_uring_rsrc_update2::resv"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, resv) - 4usize];
    ["Offset of field: io_uring_rsrc_update2::data"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, data) - 8usize];
    ["Offset of field: io_uring_rsrc_update2::tags"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, tags) - 16usize];
    ["Offset of field: io_uring_rsrc_update2::nr"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, nr) - 24usize];
    ["Offset of field: io_uring_rsrc_update2::resv2"]
        [::std::mem::offset_of!(io_uring_rsrc_update2, resv2) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_probe_op {
    pub op: __u8,
    pub resv: __u8,
    pub flags: __u16,
    pub resv2: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_probe_op"][::std::mem::size_of::<io_uring_probe_op>() - 8usize];
    ["Alignment of io_uring_probe_op"][::std::mem::align_of::<io_uring_probe_op>() - 4usize];
    ["Offset of field: io_uring_probe_op::op"]
        [::std::mem::offset_of!(io_uring_probe_op, op) - 0usize];
    ["Offset of field: io_uring_probe_op::resv"]
        [::std::mem::offset_of!(io_uring_probe_op, resv) - 1usize];
    ["Offset of field: io_uring_probe_op::flags"]
        [::std::mem::offset_of!(io_uring_probe_op, flags) - 2usize];
    ["Offset of field: io_uring_probe_op::resv2"]
        [::std::mem::offset_of!(io_uring_probe_op, resv2) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct io_uring_probe {
    pub last_op: __u8,
    pub ops_len: __u8,
    pub resv: __u16,
    pub resv2: [__u32; 3usize],
    pub ops: __IncompleteArrayField<io_uring_probe_op>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_probe"][::std::mem::size_of::<io_uring_probe>() - 16usize];
    ["Alignment of io_uring_probe"][::std::mem::align_of::<io_uring_probe>() - 4usize];
    ["Offset of field: io_uring_probe::last_op"]
        [::std::mem::offset_of!(io_uring_probe, last_op) - 0usize];
    ["Offset of field: io_uring_probe::ops_len"]
        [::std::mem::offset_of!(io_uring_probe, ops_len) - 1usize];
    ["Offset of field: io_uring_probe::resv"]
        [::std::mem::offset_of!(io_uring_probe, resv) - 2usize];
    ["Offset of field: io_uring_probe::resv2"]
        [::std::mem::offset_of!(io_uring_probe, resv2) - 4usize];
    ["Offset of field: io_uring_probe::ops"][::std::mem::offset_of!(io_uring_probe, ops) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_restriction {
    pub opcode: __u16,
    pub __bindgen_anon_1: io_uring_restriction__bindgen_ty_1,
    pub resv: __u8,
    pub resv2: [__u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_restriction__bindgen_ty_1 {
    pub register_op: __u8,
    pub sqe_op: __u8,
    pub sqe_flags: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_restriction__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_restriction__bindgen_ty_1>() - 1usize];
    ["Alignment of io_uring_restriction__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_restriction__bindgen_ty_1>() - 1usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::register_op"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, register_op) - 0usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::sqe_op"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, sqe_op) - 0usize];
    ["Offset of field: io_uring_restriction__bindgen_ty_1::sqe_flags"]
        [::std::mem::offset_of!(io_uring_restriction__bindgen_ty_1, sqe_flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_restriction"][::std::mem::size_of::<io_uring_restriction>() - 16usize];
    ["Alignment of io_uring_restriction"][::std::mem::align_of::<io_uring_restriction>() - 4usize];
    ["Offset of field: io_uring_restriction::opcode"]
        [::std::mem::offset_of!(io_uring_restriction, opcode) - 0usize];
    ["Offset of field: io_uring_restriction::resv"]
        [::std::mem::offset_of!(io_uring_restriction, resv) - 3usize];
    ["Offset of field: io_uring_restriction::resv2"]
        [::std::mem::offset_of!(io_uring_restriction, resv2) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_clock_register {
    pub clockid: __u32,
    pub __resv: [__u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_clock_register"][::std::mem::size_of::<io_uring_clock_register>() - 16usize];
    ["Alignment of io_uring_clock_register"]
        [::std::mem::align_of::<io_uring_clock_register>() - 4usize];
    ["Offset of field: io_uring_clock_register::clockid"]
        [::std::mem::offset_of!(io_uring_clock_register, clockid) - 0usize];
    ["Offset of field: io_uring_clock_register::__resv"]
        [::std::mem::offset_of!(io_uring_clock_register, __resv) - 4usize];
};
pub const IORING_REGISTER_SRC_REGISTERED: _bindgen_ty_15 = 1;
pub const IORING_REGISTER_DST_REPLACE: _bindgen_ty_15 = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_clone_buffers {
    pub src_fd: __u32,
    pub flags: __u32,
    pub src_off: __u32,
    pub dst_off: __u32,
    pub nr: __u32,
    pub pad: [__u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_clone_buffers"][::std::mem::size_of::<io_uring_clone_buffers>() - 32usize];
    ["Alignment of io_uring_clone_buffers"]
        [::std::mem::align_of::<io_uring_clone_buffers>() - 4usize];
    ["Offset of field: io_uring_clone_buffers::src_fd"]
        [::std::mem::offset_of!(io_uring_clone_buffers, src_fd) - 0usize];
    ["Offset of field: io_uring_clone_buffers::flags"]
        [::std::mem::offset_of!(io_uring_clone_buffers, flags) - 4usize];
    ["Offset of field: io_uring_clone_buffers::src_off"]
        [::std::mem::offset_of!(io_uring_clone_buffers, src_off) - 8usize];
    ["Offset of field: io_uring_clone_buffers::dst_off"]
        [::std::mem::offset_of!(io_uring_clone_buffers, dst_off) - 12usize];
    ["Offset of field: io_uring_clone_buffers::nr"]
        [::std::mem::offset_of!(io_uring_clone_buffers, nr) - 16usize];
    ["Offset of field: io_uring_clone_buffers::pad"]
        [::std::mem::offset_of!(io_uring_clone_buffers, pad) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf {
    pub addr: __u64,
    pub len: __u32,
    pub bid: __u16,
    pub resv: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf"][::std::mem::size_of::<io_uring_buf>() - 16usize];
    ["Alignment of io_uring_buf"][::std::mem::align_of::<io_uring_buf>() - 8usize];
    ["Offset of field: io_uring_buf::addr"][::std::mem::offset_of!(io_uring_buf, addr) - 0usize];
    ["Offset of field: io_uring_buf::len"][::std::mem::offset_of!(io_uring_buf, len) - 8usize];
    ["Offset of field: io_uring_buf::bid"][::std::mem::offset_of!(io_uring_buf, bid) - 12usize];
    ["Offset of field: io_uring_buf::resv"][::std::mem::offset_of!(io_uring_buf, resv) - 14usize];
};
#[repr(C)]
pub struct io_uring_buf_ring {
    pub __bindgen_anon_1: io_uring_buf_ring__bindgen_ty_1,
}
#[repr(C)]
pub struct io_uring_buf_ring__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>,
    pub bufs: __BindgenUnionField<[io_uring_buf; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1 {
    pub resv1: __u64,
    pub resv2: __u32,
    pub resv3: __u16,
    pub tail: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1::resv1"]
        [::std::mem::offset_of!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1, resv1) - 0usize];
    ["Offset of field: io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1::resv2"]
        [::std::mem::offset_of!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1, resv2) - 8usize];
    ["Offset of field: io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1::resv3"]
        [::std::mem::offset_of!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1, resv3) - 12usize];
    ["Offset of field: io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1::tail"]
        [::std::mem::offset_of!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1, tail) - 14usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf_ring__bindgen_ty_1"]
        [::std::mem::size_of::<io_uring_buf_ring__bindgen_ty_1>() - 16usize];
    ["Alignment of io_uring_buf_ring__bindgen_ty_1"]
        [::std::mem::align_of::<io_uring_buf_ring__bindgen_ty_1>() - 8usize];
    ["Offset of field: io_uring_buf_ring__bindgen_ty_1::bufs"]
        [::std::mem::offset_of!(io_uring_buf_ring__bindgen_ty_1, bufs) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf_ring"][::std::mem::size_of::<io_uring_buf_ring>() - 16usize];
    ["Alignment of io_uring_buf_ring"][::std::mem::align_of::<io_uring_buf_ring>() - 8usize];
};
pub const io_uring_register_pbuf_ring_flags_IOU_PBUF_RING_MMAP: io_uring_register_pbuf_ring_flags =
    1;
pub const io_uring_register_pbuf_ring_flags_IOU_PBUF_RING_INC: io_uring_register_pbuf_ring_flags =
    2;
pub type io_uring_register_pbuf_ring_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf_reg {
    pub ring_addr: __u64,
    pub ring_entries: __u32,
    pub bgid: __u16,
    pub flags: __u16,
    pub resv: [__u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf_reg"][::std::mem::size_of::<io_uring_buf_reg>() - 40usize];
    ["Alignment of io_uring_buf_reg"][::std::mem::align_of::<io_uring_buf_reg>() - 8usize];
    ["Offset of field: io_uring_buf_reg::ring_addr"]
        [::std::mem::offset_of!(io_uring_buf_reg, ring_addr) - 0usize];
    ["Offset of field: io_uring_buf_reg::ring_entries"]
        [::std::mem::offset_of!(io_uring_buf_reg, ring_entries) - 8usize];
    ["Offset of field: io_uring_buf_reg::bgid"]
        [::std::mem::offset_of!(io_uring_buf_reg, bgid) - 12usize];
    ["Offset of field: io_uring_buf_reg::flags"]
        [::std::mem::offset_of!(io_uring_buf_reg, flags) - 14usize];
    ["Offset of field: io_uring_buf_reg::resv"]
        [::std::mem::offset_of!(io_uring_buf_reg, resv) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_buf_status {
    pub buf_group: __u32,
    pub head: __u32,
    pub resv: [__u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_buf_status"][::std::mem::size_of::<io_uring_buf_status>() - 40usize];
    ["Alignment of io_uring_buf_status"][::std::mem::align_of::<io_uring_buf_status>() - 4usize];
    ["Offset of field: io_uring_buf_status::buf_group"]
        [::std::mem::offset_of!(io_uring_buf_status, buf_group) - 0usize];
    ["Offset of field: io_uring_buf_status::head"]
        [::std::mem::offset_of!(io_uring_buf_status, head) - 4usize];
    ["Offset of field: io_uring_buf_status::resv"]
        [::std::mem::offset_of!(io_uring_buf_status, resv) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_napi {
    pub busy_poll_to: __u32,
    pub prefer_busy_poll: __u8,
    pub pad: [__u8; 3usize],
    pub resv: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_napi"][::std::mem::size_of::<io_uring_napi>() - 16usize];
    ["Alignment of io_uring_napi"][::std::mem::align_of::<io_uring_napi>() - 8usize];
    ["Offset of field: io_uring_napi::busy_poll_to"]
        [::std::mem::offset_of!(io_uring_napi, busy_poll_to) - 0usize];
    ["Offset of field: io_uring_napi::prefer_busy_poll"]
        [::std::mem::offset_of!(io_uring_napi, prefer_busy_poll) - 4usize];
    ["Offset of field: io_uring_napi::pad"][::std::mem::offset_of!(io_uring_napi, pad) - 5usize];
    ["Offset of field: io_uring_napi::resv"][::std::mem::offset_of!(io_uring_napi, resv) - 8usize];
};
pub const io_uring_register_restriction_op_IORING_RESTRICTION_REGISTER_OP:
    io_uring_register_restriction_op = 0;
pub const io_uring_register_restriction_op_IORING_RESTRICTION_SQE_OP:
    io_uring_register_restriction_op = 1;
pub const io_uring_register_restriction_op_IORING_RESTRICTION_SQE_FLAGS_ALLOWED:
    io_uring_register_restriction_op = 2;
pub const io_uring_register_restriction_op_IORING_RESTRICTION_SQE_FLAGS_REQUIRED:
    io_uring_register_restriction_op = 3;
pub const io_uring_register_restriction_op_IORING_RESTRICTION_LAST:
    io_uring_register_restriction_op = 4;
pub type io_uring_register_restriction_op = ::std::os::raw::c_uint;
pub const IORING_REG_WAIT_TS: _bindgen_ty_16 = 1;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cqwait_reg_arg {
    pub flags: __u32,
    pub struct_size: __u32,
    pub nr_entries: __u32,
    pub pad: __u32,
    pub user_addr: __u64,
    pub pad2: [__u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_cqwait_reg_arg"][::std::mem::size_of::<io_uring_cqwait_reg_arg>() - 48usize];
    ["Alignment of io_uring_cqwait_reg_arg"]
        [::std::mem::align_of::<io_uring_cqwait_reg_arg>() - 8usize];
    ["Offset of field: io_uring_cqwait_reg_arg::flags"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, flags) - 0usize];
    ["Offset of field: io_uring_cqwait_reg_arg::struct_size"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, struct_size) - 4usize];
    ["Offset of field: io_uring_cqwait_reg_arg::nr_entries"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, nr_entries) - 8usize];
    ["Offset of field: io_uring_cqwait_reg_arg::pad"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, pad) - 12usize];
    ["Offset of field: io_uring_cqwait_reg_arg::user_addr"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, user_addr) - 16usize];
    ["Offset of field: io_uring_cqwait_reg_arg::pad2"]
        [::std::mem::offset_of!(io_uring_cqwait_reg_arg, pad2) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_reg_wait {
    pub ts: __kernel_timespec,
    pub min_wait_usec: __u32,
    pub flags: __u32,
    pub sigmask: __u64,
    pub sigmask_sz: __u32,
    pub pad: [__u32; 3usize],
    pub pad2: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_reg_wait"][::std::mem::size_of::<io_uring_reg_wait>() - 64usize];
    ["Alignment of io_uring_reg_wait"][::std::mem::align_of::<io_uring_reg_wait>() - 8usize];
    ["Offset of field: io_uring_reg_wait::ts"]
        [::std::mem::offset_of!(io_uring_reg_wait, ts) - 0usize];
    ["Offset of field: io_uring_reg_wait::min_wait_usec"]
        [::std::mem::offset_of!(io_uring_reg_wait, min_wait_usec) - 16usize];
    ["Offset of field: io_uring_reg_wait::flags"]
        [::std::mem::offset_of!(io_uring_reg_wait, flags) - 20usize];
    ["Offset of field: io_uring_reg_wait::sigmask"]
        [::std::mem::offset_of!(io_uring_reg_wait, sigmask) - 24usize];
    ["Offset of field: io_uring_reg_wait::sigmask_sz"]
        [::std::mem::offset_of!(io_uring_reg_wait, sigmask_sz) - 32usize];
    ["Offset of field: io_uring_reg_wait::pad"]
        [::std::mem::offset_of!(io_uring_reg_wait, pad) - 36usize];
    ["Offset of field: io_uring_reg_wait::pad2"]
        [::std::mem::offset_of!(io_uring_reg_wait, pad2) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_getevents_arg {
    pub sigmask: __u64,
    pub sigmask_sz: __u32,
    pub min_wait_usec: __u32,
    pub ts: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_getevents_arg"][::std::mem::size_of::<io_uring_getevents_arg>() - 24usize];
    ["Alignment of io_uring_getevents_arg"]
        [::std::mem::align_of::<io_uring_getevents_arg>() - 8usize];
    ["Offset of field: io_uring_getevents_arg::sigmask"]
        [::std::mem::offset_of!(io_uring_getevents_arg, sigmask) - 0usize];
    ["Offset of field: io_uring_getevents_arg::sigmask_sz"]
        [::std::mem::offset_of!(io_uring_getevents_arg, sigmask_sz) - 8usize];
    ["Offset of field: io_uring_getevents_arg::min_wait_usec"]
        [::std::mem::offset_of!(io_uring_getevents_arg, min_wait_usec) - 12usize];
    ["Offset of field: io_uring_getevents_arg::ts"]
        [::std::mem::offset_of!(io_uring_getevents_arg, ts) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sync_cancel_reg {
    pub addr: __u64,
    pub fd: __s32,
    pub flags: __u32,
    pub timeout: __kernel_timespec,
    pub opcode: __u8,
    pub pad: [__u8; 7usize],
    pub pad2: [__u64; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sync_cancel_reg"]
        [::std::mem::size_of::<io_uring_sync_cancel_reg>() - 64usize];
    ["Alignment of io_uring_sync_cancel_reg"]
        [::std::mem::align_of::<io_uring_sync_cancel_reg>() - 8usize];
    ["Offset of field: io_uring_sync_cancel_reg::addr"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, addr) - 0usize];
    ["Offset of field: io_uring_sync_cancel_reg::fd"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, fd) - 8usize];
    ["Offset of field: io_uring_sync_cancel_reg::flags"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, flags) - 12usize];
    ["Offset of field: io_uring_sync_cancel_reg::timeout"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, timeout) - 16usize];
    ["Offset of field: io_uring_sync_cancel_reg::opcode"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, opcode) - 32usize];
    ["Offset of field: io_uring_sync_cancel_reg::pad"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, pad) - 33usize];
    ["Offset of field: io_uring_sync_cancel_reg::pad2"]
        [::std::mem::offset_of!(io_uring_sync_cancel_reg, pad2) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_file_index_range {
    pub off: __u32,
    pub len: __u32,
    pub resv: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_file_index_range"]
        [::std::mem::size_of::<io_uring_file_index_range>() - 16usize];
    ["Alignment of io_uring_file_index_range"]
        [::std::mem::align_of::<io_uring_file_index_range>() - 8usize];
    ["Offset of field: io_uring_file_index_range::off"]
        [::std::mem::offset_of!(io_uring_file_index_range, off) - 0usize];
    ["Offset of field: io_uring_file_index_range::len"]
        [::std::mem::offset_of!(io_uring_file_index_range, len) - 4usize];
    ["Offset of field: io_uring_file_index_range::resv"]
        [::std::mem::offset_of!(io_uring_file_index_range, resv) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_recvmsg_out {
    pub namelen: __u32,
    pub controllen: __u32,
    pub payloadlen: __u32,
    pub flags: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_recvmsg_out"][::std::mem::size_of::<io_uring_recvmsg_out>() - 16usize];
    ["Alignment of io_uring_recvmsg_out"][::std::mem::align_of::<io_uring_recvmsg_out>() - 4usize];
    ["Offset of field: io_uring_recvmsg_out::namelen"]
        [::std::mem::offset_of!(io_uring_recvmsg_out, namelen) - 0usize];
    ["Offset of field: io_uring_recvmsg_out::controllen"]
        [::std::mem::offset_of!(io_uring_recvmsg_out, controllen) - 4usize];
    ["Offset of field: io_uring_recvmsg_out::payloadlen"]
        [::std::mem::offset_of!(io_uring_recvmsg_out, payloadlen) - 8usize];
    ["Offset of field: io_uring_recvmsg_out::flags"]
        [::std::mem::offset_of!(io_uring_recvmsg_out, flags) - 12usize];
};
pub const io_uring_socket_op_SOCKET_URING_OP_SIOCINQ: io_uring_socket_op = 0;
pub const io_uring_socket_op_SOCKET_URING_OP_SIOCOUTQ: io_uring_socket_op = 1;
pub const io_uring_socket_op_SOCKET_URING_OP_GETSOCKOPT: io_uring_socket_op = 2;
pub const io_uring_socket_op_SOCKET_URING_OP_SETSOCKOPT: io_uring_socket_op = 3;
pub type io_uring_socket_op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_rqe {
    pub off: __u64,
    pub len: __u32,
    pub __pad: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_rqe"][::std::mem::size_of::<io_uring_zcrx_rqe>() - 16usize];
    ["Alignment of io_uring_zcrx_rqe"][::std::mem::align_of::<io_uring_zcrx_rqe>() - 8usize];
    ["Offset of field: io_uring_zcrx_rqe::off"]
        [::std::mem::offset_of!(io_uring_zcrx_rqe, off) - 0usize];
    ["Offset of field: io_uring_zcrx_rqe::len"]
        [::std::mem::offset_of!(io_uring_zcrx_rqe, len) - 8usize];
    ["Offset of field: io_uring_zcrx_rqe::__pad"]
        [::std::mem::offset_of!(io_uring_zcrx_rqe, __pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_cqe {
    pub off: __u64,
    pub __pad: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_cqe"][::std::mem::size_of::<io_uring_zcrx_cqe>() - 16usize];
    ["Alignment of io_uring_zcrx_cqe"][::std::mem::align_of::<io_uring_zcrx_cqe>() - 8usize];
    ["Offset of field: io_uring_zcrx_cqe::off"]
        [::std::mem::offset_of!(io_uring_zcrx_cqe, off) - 0usize];
    ["Offset of field: io_uring_zcrx_cqe::__pad"]
        [::std::mem::offset_of!(io_uring_zcrx_cqe, __pad) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub rqes: __u32,
    pub __resv2: __u32,
    pub __resv: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_offsets"][::std::mem::size_of::<io_uring_zcrx_offsets>() - 32usize];
    ["Alignment of io_uring_zcrx_offsets"]
        [::std::mem::align_of::<io_uring_zcrx_offsets>() - 8usize];
    ["Offset of field: io_uring_zcrx_offsets::head"]
        [::std::mem::offset_of!(io_uring_zcrx_offsets, head) - 0usize];
    ["Offset of field: io_uring_zcrx_offsets::tail"]
        [::std::mem::offset_of!(io_uring_zcrx_offsets, tail) - 4usize];
    ["Offset of field: io_uring_zcrx_offsets::rqes"]
        [::std::mem::offset_of!(io_uring_zcrx_offsets, rqes) - 8usize];
    ["Offset of field: io_uring_zcrx_offsets::__resv2"]
        [::std::mem::offset_of!(io_uring_zcrx_offsets, __resv2) - 12usize];
    ["Offset of field: io_uring_zcrx_offsets::__resv"]
        [::std::mem::offset_of!(io_uring_zcrx_offsets, __resv) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_area_reg {
    pub addr: __u64,
    pub len: __u64,
    pub rq_area_token: __u64,
    pub flags: __u32,
    pub __resv1: __u32,
    pub __resv2: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_area_reg"][::std::mem::size_of::<io_uring_zcrx_area_reg>() - 48usize];
    ["Alignment of io_uring_zcrx_area_reg"]
        [::std::mem::align_of::<io_uring_zcrx_area_reg>() - 8usize];
    ["Offset of field: io_uring_zcrx_area_reg::addr"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, addr) - 0usize];
    ["Offset of field: io_uring_zcrx_area_reg::len"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, len) - 8usize];
    ["Offset of field: io_uring_zcrx_area_reg::rq_area_token"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, rq_area_token) - 16usize];
    ["Offset of field: io_uring_zcrx_area_reg::flags"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, flags) - 24usize];
    ["Offset of field: io_uring_zcrx_area_reg::__resv1"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, __resv1) - 28usize];
    ["Offset of field: io_uring_zcrx_area_reg::__resv2"]
        [::std::mem::offset_of!(io_uring_zcrx_area_reg, __resv2) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_ifq_reg {
    pub if_idx: __u32,
    pub if_rxq: __u32,
    pub rq_entries: __u32,
    pub flags: __u32,
    pub area_ptr: __u64,
    pub region_ptr: __u64,
    pub offsets: io_uring_zcrx_offsets,
    pub __resv: [__u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_ifq_reg"][::std::mem::size_of::<io_uring_zcrx_ifq_reg>() - 96usize];
    ["Alignment of io_uring_zcrx_ifq_reg"]
        [::std::mem::align_of::<io_uring_zcrx_ifq_reg>() - 8usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::if_idx"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, if_idx) - 0usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::if_rxq"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, if_rxq) - 4usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::rq_entries"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, rq_entries) - 8usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::flags"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, flags) - 12usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::area_ptr"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, area_ptr) - 16usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::region_ptr"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, region_ptr) - 24usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::offsets"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, offsets) - 32usize];
    ["Offset of field: io_uring_zcrx_ifq_reg::__resv"]
        [::std::mem::offset_of!(io_uring_zcrx_ifq_reg, __resv) - 64usize];
};
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub const memory_order_memory_order_relaxed: memory_order = 0;
pub const memory_order_memory_order_consume: memory_order = 1;
pub const memory_order_memory_order_acquire: memory_order = 2;
pub const memory_order_memory_order_release: memory_order = 3;
pub const memory_order_memory_order_acq_rel: memory_order = 4;
pub const memory_order_memory_order_seq_cst: memory_order = 5;
pub type memory_order = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn atomic_thread_fence(arg1: memory_order);
}
unsafe extern "C" {
    pub fn atomic_signal_fence(arg1: memory_order);
}
pub type atomic_bool = bool;
pub type atomic_char = ::std::os::raw::c_char;
pub type atomic_schar = ::std::os::raw::c_schar;
pub type atomic_uchar = ::std::os::raw::c_uchar;
pub type atomic_short = ::std::os::raw::c_short;
pub type atomic_ushort = ::std::os::raw::c_ushort;
pub type atomic_int = ::std::os::raw::c_int;
pub type atomic_uint = ::std::os::raw::c_uint;
pub type atomic_long = ::std::os::raw::c_long;
pub type atomic_ulong = ::std::os::raw::c_ulong;
pub type atomic_llong = ::std::os::raw::c_longlong;
pub type atomic_ullong = ::std::os::raw::c_ulonglong;
pub type atomic_char16_t = uint_least16_t;
pub type atomic_char32_t = uint_least32_t;
pub type atomic_wchar_t = wchar_t;
pub type atomic_int_least8_t = int_least8_t;
pub type atomic_uint_least8_t = uint_least8_t;
pub type atomic_int_least16_t = int_least16_t;
pub type atomic_uint_least16_t = uint_least16_t;
pub type atomic_int_least32_t = int_least32_t;
pub type atomic_uint_least32_t = uint_least32_t;
pub type atomic_int_least64_t = int_least64_t;
pub type atomic_uint_least64_t = uint_least64_t;
pub type atomic_int_fast8_t = int_fast8_t;
pub type atomic_uint_fast8_t = uint_fast8_t;
pub type atomic_int_fast16_t = int_fast16_t;
pub type atomic_uint_fast16_t = uint_fast16_t;
pub type atomic_int_fast32_t = int_fast32_t;
pub type atomic_uint_fast32_t = uint_fast32_t;
pub type atomic_int_fast64_t = int_fast64_t;
pub type atomic_uint_fast64_t = uint_fast64_t;
pub type atomic_intptr_t = isize;
pub type atomic_uintptr_t = usize;
pub type atomic_size_t = usize;
pub type atomic_ptrdiff_t = isize;
pub type atomic_intmax_t = intmax_t;
pub type atomic_uintmax_t = uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atomic_flag {
    pub _Value: atomic_bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of atomic_flag"][::std::mem::size_of::<atomic_flag>() - 1usize];
    ["Alignment of atomic_flag"][::std::mem::align_of::<atomic_flag>() - 1usize];
    ["Offset of field: atomic_flag::_Value"][::std::mem::offset_of!(atomic_flag, _Value) - 0usize];
};
unsafe extern "C" {
    pub fn atomic_flag_test_and_set(arg1: *mut atomic_flag) -> bool;
}
unsafe extern "C" {
    pub fn atomic_flag_test_and_set_explicit(arg1: *mut atomic_flag, arg2: memory_order) -> bool;
}
unsafe extern "C" {
    pub fn atomic_flag_clear(arg1: *mut atomic_flag);
}
unsafe extern "C" {
    pub fn atomic_flag_clear_explicit(arg1: *mut atomic_flag, arg2: memory_order);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_sq {
    pub khead: *mut ::std::os::raw::c_uint,
    pub ktail: *mut ::std::os::raw::c_uint,
    pub kring_mask: *mut ::std::os::raw::c_uint,
    pub kring_entries: *mut ::std::os::raw::c_uint,
    pub kflags: *mut ::std::os::raw::c_uint,
    pub kdropped: *mut ::std::os::raw::c_uint,
    pub array: *mut ::std::os::raw::c_uint,
    pub sqes: *mut io_uring_sqe,
    pub sqe_head: ::std::os::raw::c_uint,
    pub sqe_tail: ::std::os::raw::c_uint,
    pub ring_sz: usize,
    pub ring_ptr: *mut ::std::os::raw::c_void,
    pub ring_mask: ::std::os::raw::c_uint,
    pub ring_entries: ::std::os::raw::c_uint,
    pub pad: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_sq"][::std::mem::size_of::<io_uring_sq>() - 104usize];
    ["Alignment of io_uring_sq"][::std::mem::align_of::<io_uring_sq>() - 8usize];
    ["Offset of field: io_uring_sq::khead"][::std::mem::offset_of!(io_uring_sq, khead) - 0usize];
    ["Offset of field: io_uring_sq::ktail"][::std::mem::offset_of!(io_uring_sq, ktail) - 8usize];
    ["Offset of field: io_uring_sq::kring_mask"]
        [::std::mem::offset_of!(io_uring_sq, kring_mask) - 16usize];
    ["Offset of field: io_uring_sq::kring_entries"]
        [::std::mem::offset_of!(io_uring_sq, kring_entries) - 24usize];
    ["Offset of field: io_uring_sq::kflags"][::std::mem::offset_of!(io_uring_sq, kflags) - 32usize];
    ["Offset of field: io_uring_sq::kdropped"]
        [::std::mem::offset_of!(io_uring_sq, kdropped) - 40usize];
    ["Offset of field: io_uring_sq::array"][::std::mem::offset_of!(io_uring_sq, array) - 48usize];
    ["Offset of field: io_uring_sq::sqes"][::std::mem::offset_of!(io_uring_sq, sqes) - 56usize];
    ["Offset of field: io_uring_sq::sqe_head"]
        [::std::mem::offset_of!(io_uring_sq, sqe_head) - 64usize];
    ["Offset of field: io_uring_sq::sqe_tail"]
        [::std::mem::offset_of!(io_uring_sq, sqe_tail) - 68usize];
    ["Offset of field: io_uring_sq::ring_sz"]
        [::std::mem::offset_of!(io_uring_sq, ring_sz) - 72usize];
    ["Offset of field: io_uring_sq::ring_ptr"]
        [::std::mem::offset_of!(io_uring_sq, ring_ptr) - 80usize];
    ["Offset of field: io_uring_sq::ring_mask"]
        [::std::mem::offset_of!(io_uring_sq, ring_mask) - 88usize];
    ["Offset of field: io_uring_sq::ring_entries"]
        [::std::mem::offset_of!(io_uring_sq, ring_entries) - 92usize];
    ["Offset of field: io_uring_sq::pad"][::std::mem::offset_of!(io_uring_sq, pad) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cq {
    pub khead: *mut ::std::os::raw::c_uint,
    pub ktail: *mut ::std::os::raw::c_uint,
    pub kring_mask: *mut ::std::os::raw::c_uint,
    pub kring_entries: *mut ::std::os::raw::c_uint,
    pub kflags: *mut ::std::os::raw::c_uint,
    pub koverflow: *mut ::std::os::raw::c_uint,
    pub cqes: *mut io_uring_cqe,
    pub ring_sz: usize,
    pub ring_ptr: *mut ::std::os::raw::c_void,
    pub ring_mask: ::std::os::raw::c_uint,
    pub ring_entries: ::std::os::raw::c_uint,
    pub pad: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_cq"][::std::mem::size_of::<io_uring_cq>() - 88usize];
    ["Alignment of io_uring_cq"][::std::mem::align_of::<io_uring_cq>() - 8usize];
    ["Offset of field: io_uring_cq::khead"][::std::mem::offset_of!(io_uring_cq, khead) - 0usize];
    ["Offset of field: io_uring_cq::ktail"][::std::mem::offset_of!(io_uring_cq, ktail) - 8usize];
    ["Offset of field: io_uring_cq::kring_mask"]
        [::std::mem::offset_of!(io_uring_cq, kring_mask) - 16usize];
    ["Offset of field: io_uring_cq::kring_entries"]
        [::std::mem::offset_of!(io_uring_cq, kring_entries) - 24usize];
    ["Offset of field: io_uring_cq::kflags"][::std::mem::offset_of!(io_uring_cq, kflags) - 32usize];
    ["Offset of field: io_uring_cq::koverflow"]
        [::std::mem::offset_of!(io_uring_cq, koverflow) - 40usize];
    ["Offset of field: io_uring_cq::cqes"][::std::mem::offset_of!(io_uring_cq, cqes) - 48usize];
    ["Offset of field: io_uring_cq::ring_sz"]
        [::std::mem::offset_of!(io_uring_cq, ring_sz) - 56usize];
    ["Offset of field: io_uring_cq::ring_ptr"]
        [::std::mem::offset_of!(io_uring_cq, ring_ptr) - 64usize];
    ["Offset of field: io_uring_cq::ring_mask"]
        [::std::mem::offset_of!(io_uring_cq, ring_mask) - 72usize];
    ["Offset of field: io_uring_cq::ring_entries"]
        [::std::mem::offset_of!(io_uring_cq, ring_entries) - 76usize];
    ["Offset of field: io_uring_cq::pad"][::std::mem::offset_of!(io_uring_cq, pad) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring {
    pub sq: io_uring_sq,
    pub cq: io_uring_cq,
    pub flags: ::std::os::raw::c_uint,
    pub ring_fd: ::std::os::raw::c_int,
    pub features: ::std::os::raw::c_uint,
    pub enter_ring_fd: ::std::os::raw::c_int,
    pub int_flags: __u8,
    pub pad: [__u8; 3usize],
    pub pad2: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring"][::std::mem::size_of::<io_uring>() - 216usize];
    ["Alignment of io_uring"][::std::mem::align_of::<io_uring>() - 8usize];
    ["Offset of field: io_uring::sq"][::std::mem::offset_of!(io_uring, sq) - 0usize];
    ["Offset of field: io_uring::cq"][::std::mem::offset_of!(io_uring, cq) - 104usize];
    ["Offset of field: io_uring::flags"][::std::mem::offset_of!(io_uring, flags) - 192usize];
    ["Offset of field: io_uring::ring_fd"][::std::mem::offset_of!(io_uring, ring_fd) - 196usize];
    ["Offset of field: io_uring::features"][::std::mem::offset_of!(io_uring, features) - 200usize];
    ["Offset of field: io_uring::enter_ring_fd"]
        [::std::mem::offset_of!(io_uring, enter_ring_fd) - 204usize];
    ["Offset of field: io_uring::int_flags"]
        [::std::mem::offset_of!(io_uring, int_flags) - 208usize];
    ["Offset of field: io_uring::pad"][::std::mem::offset_of!(io_uring, pad) - 209usize];
    ["Offset of field: io_uring::pad2"][::std::mem::offset_of!(io_uring, pad2) - 212usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_zcrx_rq {
    pub khead: *mut __u32,
    pub ktail: *mut __u32,
    pub rq_tail: __u32,
    pub ring_entries: ::std::os::raw::c_uint,
    pub rqes: *mut io_uring_zcrx_rqe,
    pub ring_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_zcrx_rq"][::std::mem::size_of::<io_uring_zcrx_rq>() - 40usize];
    ["Alignment of io_uring_zcrx_rq"][::std::mem::align_of::<io_uring_zcrx_rq>() - 8usize];
    ["Offset of field: io_uring_zcrx_rq::khead"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, khead) - 0usize];
    ["Offset of field: io_uring_zcrx_rq::ktail"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, ktail) - 8usize];
    ["Offset of field: io_uring_zcrx_rq::rq_tail"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, rq_tail) - 16usize];
    ["Offset of field: io_uring_zcrx_rq::ring_entries"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, ring_entries) - 20usize];
    ["Offset of field: io_uring_zcrx_rq::rqes"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, rqes) - 24usize];
    ["Offset of field: io_uring_zcrx_rq::ring_ptr"]
        [::std::mem::offset_of!(io_uring_zcrx_rq, ring_ptr) - 32usize];
};
unsafe extern "C" {
    pub fn io_uring_get_probe_ring(ring: *mut io_uring) -> *mut io_uring_probe;
}
unsafe extern "C" {
    pub fn io_uring_get_probe() -> *mut io_uring_probe;
}
unsafe extern "C" {
    pub fn io_uring_free_probe(probe: *mut io_uring_probe);
}
unsafe extern "C" {
    #[link_name = "io_uring_opcode_supported__extern"]
    pub fn io_uring_opcode_supported(
        p: *const io_uring_probe,
        op: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_queue_init_mem(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        p: *mut io_uring_params,
        buf: *mut ::std::os::raw::c_void,
        buf_size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_queue_init_params(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        p: *mut io_uring_params,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_queue_init(
        entries: ::std::os::raw::c_uint,
        ring: *mut io_uring,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_queue_mmap(
        fd: ::std::os::raw::c_int,
        p: *mut io_uring_params,
        ring: *mut io_uring,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_ring_dontfork(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_queue_exit(ring: *mut io_uring);
}
unsafe extern "C" {
    pub fn io_uring_peek_batch_cqe(
        ring: *mut io_uring,
        cqes: *mut *mut io_uring_cqe,
        count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn io_uring_wait_cqes(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_wait_cqes_min_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        min_ts_usec: ::std::os::raw::c_uint,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_wait_cqe_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        ts: *mut __kernel_timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit_and_wait(
        ring: *mut io_uring,
        wait_nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit_and_wait_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit_and_wait_min_timeout(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        ts: *mut __kernel_timespec,
        min_wait: ::std::os::raw::c_uint,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit_and_wait_reg(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
        reg_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_wait_reg(
        ring: *mut io_uring,
        reg: *mut io_uring_reg_wait,
        nr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_resize_rings(
        ring: *mut io_uring,
        p: *mut io_uring_params,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_clone_buffers_offset(
        dst: *mut io_uring,
        src: *mut io_uring,
        dst_off: ::std::os::raw::c_uint,
        src_off: ::std::os::raw::c_uint,
        nr: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_clone_buffers(dst: *mut io_uring, src: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_buffers(
        ring: *mut io_uring,
        iovecs: *const iovec,
        nr_iovecs: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_buffers_tags(
        ring: *mut io_uring,
        iovecs: *const iovec,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_buffers_sparse(
        ring: *mut io_uring,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_buffers_update_tag(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        iovecs: *const iovec,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_buffers(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_files(
        ring: *mut io_uring,
        files: *const ::std::os::raw::c_int,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_files_tags(
        ring: *mut io_uring,
        files: *const ::std::os::raw::c_int,
        tags: *const __u64,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_files_sparse(
        ring: *mut io_uring,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_files_update_tag(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        files: *const ::std::os::raw::c_int,
        tags: *const __u64,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_files(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_files_update(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        files: *const ::std::os::raw::c_int,
        nr_files: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_eventfd(
        ring: *mut io_uring,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_eventfd_async(
        ring: *mut io_uring,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_eventfd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_probe(
        ring: *mut io_uring,
        p: *mut io_uring_probe,
        nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_personality(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_personality(
        ring: *mut io_uring,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_restrictions(
        ring: *mut io_uring,
        res: *mut io_uring_restriction,
        nr_res: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_enable_rings(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __io_uring_sqring_wait(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_iowq_aff(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_iowq_max_workers(
        ring: *mut io_uring,
        values: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_close_ring_fd(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_buf_ring(
        ring: *mut io_uring,
        reg: *mut io_uring_buf_reg,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_buf_ring(
        ring: *mut io_uring,
        bgid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_buf_ring_head(
        ring: *mut io_uring,
        buf_group: ::std::os::raw::c_int,
        head: *mut u16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_sync_cancel(
        ring: *mut io_uring,
        reg: *mut io_uring_sync_cancel_reg,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_file_alloc_range(
        ring: *mut io_uring,
        off: ::std::os::raw::c_uint,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_napi(
        ring: *mut io_uring,
        napi: *mut io_uring_napi,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_unregister_napi(
        ring: *mut io_uring,
        napi: *mut io_uring_napi,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_ifq(
        ring: *mut io_uring,
        reg: *mut io_uring_zcrx_ifq_reg,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_clock(
        ring: *mut io_uring,
        arg: *mut io_uring_clock_register,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_get_events(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_submit_and_get_events(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_enter(
        fd: ::std::os::raw::c_uint,
        to_submit: ::std::os::raw::c_uint,
        min_complete: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        sig: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_enter2(
        fd: ::std::os::raw::c_uint,
        to_submit: ::std::os::raw::c_uint,
        min_complete: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
        sig: *mut sigset_t,
        sz: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_setup(
        entries: ::std::os::raw::c_uint,
        p: *mut io_uring_params,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register(
        fd: ::std::os::raw::c_uint,
        opcode: ::std::os::raw::c_uint,
        arg: *const ::std::os::raw::c_void,
        nr_args: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_register_region(
        ring: *mut io_uring,
        reg: *mut io_uring_mem_region_reg,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_setup_buf_ring(
        ring: *mut io_uring,
        nentries: ::std::os::raw::c_uint,
        bgid: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut io_uring_buf_ring;
}
unsafe extern "C" {
    pub fn io_uring_free_buf_ring(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        nentries: ::std::os::raw::c_uint,
        bgid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __io_uring_get_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        submit: ::std::os::raw::c_uint,
        wait_nr: ::std::os::raw::c_uint,
        sigmask: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_shift_from_flags__extern"]
    pub fn io_uring_cqe_shift_from_flags(flags: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_shift__extern"]
    pub fn io_uring_cqe_shift(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_uring_cqe_iter {
    pub cqes: *mut io_uring_cqe,
    pub mask: ::std::os::raw::c_uint,
    pub shift: ::std::os::raw::c_uint,
    pub head: ::std::os::raw::c_uint,
    pub tail: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of io_uring_cqe_iter"][::std::mem::size_of::<io_uring_cqe_iter>() - 24usize];
    ["Alignment of io_uring_cqe_iter"][::std::mem::align_of::<io_uring_cqe_iter>() - 8usize];
    ["Offset of field: io_uring_cqe_iter::cqes"]
        [::std::mem::offset_of!(io_uring_cqe_iter, cqes) - 0usize];
    ["Offset of field: io_uring_cqe_iter::mask"]
        [::std::mem::offset_of!(io_uring_cqe_iter, mask) - 8usize];
    ["Offset of field: io_uring_cqe_iter::shift"]
        [::std::mem::offset_of!(io_uring_cqe_iter, shift) - 12usize];
    ["Offset of field: io_uring_cqe_iter::head"]
        [::std::mem::offset_of!(io_uring_cqe_iter, head) - 16usize];
    ["Offset of field: io_uring_cqe_iter::tail"]
        [::std::mem::offset_of!(io_uring_cqe_iter, tail) - 20usize];
};
unsafe extern "C" {
    #[link_name = "io_uring_cqe_iter_init__extern"]
    pub fn io_uring_cqe_iter_init(ring: *const io_uring) -> io_uring_cqe_iter;
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_iter_next__extern"]
    pub fn io_uring_cqe_iter_next(
        iter: *mut io_uring_cqe_iter,
        cqe: *mut *mut io_uring_cqe,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "io_uring_cq_advance__extern"]
    pub fn io_uring_cq_advance(ring: *mut io_uring, nr: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_seen__extern"]
    pub fn io_uring_cqe_seen(ring: *mut io_uring, cqe: *mut io_uring_cqe);
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_set_data__extern"]
    pub fn io_uring_sqe_set_data(sqe: *mut io_uring_sqe, data: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_get_data__extern"]
    pub fn io_uring_cqe_get_data(cqe: *const io_uring_cqe) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_set_data64__extern"]
    pub fn io_uring_sqe_set_data64(sqe: *mut io_uring_sqe, data: __u64);
}
unsafe extern "C" {
    #[link_name = "io_uring_cqe_get_data64__extern"]
    pub fn io_uring_cqe_get_data64(cqe: *const io_uring_cqe) -> __u64;
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_set_flags__extern"]
    pub fn io_uring_sqe_set_flags(sqe: *mut io_uring_sqe, flags: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_set_buf_group__extern"]
    pub fn io_uring_sqe_set_buf_group(sqe: *mut io_uring_sqe, bgid: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "__io_uring_set_target_fixed_file__extern"]
    pub fn __io_uring_set_target_fixed_file(
        sqe: *mut io_uring_sqe,
        file_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_initialize_sqe__extern"]
    pub fn io_uring_initialize_sqe(sqe: *mut io_uring_sqe);
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_rw__extern"]
    pub fn io_uring_prep_rw(
        op: ::std::os::raw::c_int,
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_splice__extern"]
    pub fn io_uring_prep_splice(
        sqe: *mut io_uring_sqe,
        fd_in: ::std::os::raw::c_int,
        off_in: i64,
        fd_out: ::std::os::raw::c_int,
        off_out: i64,
        nbytes: ::std::os::raw::c_uint,
        splice_flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_tee__extern"]
    pub fn io_uring_prep_tee(
        sqe: *mut io_uring_sqe,
        fd_in: ::std::os::raw::c_int,
        fd_out: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_uint,
        splice_flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_readv__extern"]
    pub fn io_uring_prep_readv(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_readv2__extern"]
    pub fn io_uring_prep_readv2(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_read_fixed__extern"]
    pub fn io_uring_prep_read_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_readv_fixed__extern"]
    pub fn io_uring_prep_readv_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
        buf_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_writev__extern"]
    pub fn io_uring_prep_writev(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_writev2__extern"]
    pub fn io_uring_prep_writev2(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_write_fixed__extern"]
    pub fn io_uring_prep_write_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_writev_fixed__extern"]
    pub fn io_uring_prep_writev_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        iovecs: *const iovec,
        nr_vecs: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
        buf_index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_recvmsg__extern"]
    pub fn io_uring_prep_recvmsg(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_recvmsg_multishot__extern"]
    pub fn io_uring_prep_recvmsg_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *mut msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_sendmsg__extern"]
    pub fn io_uring_prep_sendmsg(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *const msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "__io_uring_prep_poll_mask__extern"]
    pub fn __io_uring_prep_poll_mask(poll_mask: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_poll_add__extern"]
    pub fn io_uring_prep_poll_add(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        poll_mask: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_poll_multishot__extern"]
    pub fn io_uring_prep_poll_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        poll_mask: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_poll_remove__extern"]
    pub fn io_uring_prep_poll_remove(sqe: *mut io_uring_sqe, user_data: __u64);
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_poll_update__extern"]
    pub fn io_uring_prep_poll_update(
        sqe: *mut io_uring_sqe,
        old_user_data: __u64,
        new_user_data: __u64,
        poll_mask: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fsync__extern"]
    pub fn io_uring_prep_fsync(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        fsync_flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_nop__extern"]
    pub fn io_uring_prep_nop(sqe: *mut io_uring_sqe);
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_timeout__extern"]
    pub fn io_uring_prep_timeout(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        count: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_timeout_remove__extern"]
    pub fn io_uring_prep_timeout_remove(
        sqe: *mut io_uring_sqe,
        user_data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_timeout_update__extern"]
    pub fn io_uring_prep_timeout_update(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        user_data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_accept__extern"]
    pub fn io_uring_prep_accept(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_accept_direct__extern"]
    pub fn io_uring_prep_accept_direct(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
        file_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_multishot_accept__extern"]
    pub fn io_uring_prep_multishot_accept(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_multishot_accept_direct__extern"]
    pub fn io_uring_prep_multishot_accept_direct(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: *mut socklen_t,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_cancel64__extern"]
    pub fn io_uring_prep_cancel64(
        sqe: *mut io_uring_sqe,
        user_data: __u64,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_cancel__extern"]
    pub fn io_uring_prep_cancel(
        sqe: *mut io_uring_sqe,
        user_data: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_cancel_fd__extern"]
    pub fn io_uring_prep_cancel_fd(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_link_timeout__extern"]
    pub fn io_uring_prep_link_timeout(
        sqe: *mut io_uring_sqe,
        ts: *mut __kernel_timespec,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_connect__extern"]
    pub fn io_uring_prep_connect(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *const sockaddr,
        addrlen: socklen_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_bind__extern"]
    pub fn io_uring_prep_bind(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        addr: *mut sockaddr,
        addrlen: socklen_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_listen__extern"]
    pub fn io_uring_prep_listen(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        backlog: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epoll_event {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_epoll_wait__extern"]
    pub fn io_uring_prep_epoll_wait(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        events: *mut epoll_event,
        maxevents: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_files_update__extern"]
    pub fn io_uring_prep_files_update(
        sqe: *mut io_uring_sqe,
        fds: *mut ::std::os::raw::c_int,
        nr_fds: ::std::os::raw::c_uint,
        offset: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fallocate__extern"]
    pub fn io_uring_prep_fallocate(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        offset: __u64,
        len: __u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_openat__extern"]
    pub fn io_uring_prep_openat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_openat_direct__extern"]
    pub fn io_uring_prep_openat_direct(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
        file_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_open__extern"]
    pub fn io_uring_prep_open(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_open_direct__extern"]
    pub fn io_uring_prep_open_direct(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mode: mode_t,
        file_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_close__extern"]
    pub fn io_uring_prep_close(sqe: *mut io_uring_sqe, fd: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_close_direct__extern"]
    pub fn io_uring_prep_close_direct(sqe: *mut io_uring_sqe, file_index: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_read__extern"]
    pub fn io_uring_prep_read(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_read_multishot__extern"]
    pub fn io_uring_prep_read_multishot(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
        buf_group: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_write__extern"]
    pub fn io_uring_prep_write(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        nbytes: ::std::os::raw::c_uint,
        offset: __u64,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_statx__extern"]
    pub fn io_uring_prep_statx(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_uint,
        statxbuf: *mut statx,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fadvise__extern"]
    pub fn io_uring_prep_fadvise(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        offset: __u64,
        len: __u32,
        advice: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_madvise__extern"]
    pub fn io_uring_prep_madvise(
        sqe: *mut io_uring_sqe,
        addr: *mut ::std::os::raw::c_void,
        length: __u32,
        advice: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fadvise64__extern"]
    pub fn io_uring_prep_fadvise64(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        offset: __u64,
        len: off_t,
        advice: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_madvise64__extern"]
    pub fn io_uring_prep_madvise64(
        sqe: *mut io_uring_sqe,
        addr: *mut ::std::os::raw::c_void,
        length: off_t,
        advice: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_send__extern"]
    pub fn io_uring_prep_send(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_send_bundle__extern"]
    pub fn io_uring_prep_send_bundle(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_send_set_addr__extern"]
    pub fn io_uring_prep_send_set_addr(
        sqe: *mut io_uring_sqe,
        dest_addr: *const sockaddr,
        addr_len: __u16,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_sendto__extern"]
    pub fn io_uring_prep_sendto(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        addr: *const sockaddr,
        addrlen: socklen_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_send_zc__extern"]
    pub fn io_uring_prep_send_zc(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        zc_flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_send_zc_fixed__extern"]
    pub fn io_uring_prep_send_zc_fixed(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
        zc_flags: ::std::os::raw::c_uint,
        buf_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_sendmsg_zc__extern"]
    pub fn io_uring_prep_sendmsg_zc(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *const msghdr,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_sendmsg_zc_fixed__extern"]
    pub fn io_uring_prep_sendmsg_zc_fixed(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        msg: *const msghdr,
        flags: ::std::os::raw::c_uint,
        buf_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_recv__extern"]
    pub fn io_uring_prep_recv(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_recv_multishot__extern"]
    pub fn io_uring_prep_recv_multishot(
        sqe: *mut io_uring_sqe,
        sockfd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_validate__extern"]
    pub fn io_uring_recvmsg_validate(
        buf: *mut ::std::os::raw::c_void,
        buf_len: ::std::os::raw::c_int,
        msgh: *mut msghdr,
    ) -> *mut io_uring_recvmsg_out;
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_name__extern"]
    pub fn io_uring_recvmsg_name(o: *mut io_uring_recvmsg_out) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_cmsg_firsthdr__extern"]
    pub fn io_uring_recvmsg_cmsg_firsthdr(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
    ) -> *mut cmsghdr;
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_cmsg_nexthdr__extern"]
    pub fn io_uring_recvmsg_cmsg_nexthdr(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
        cmsg: *mut cmsghdr,
    ) -> *mut cmsghdr;
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_payload__extern"]
    pub fn io_uring_recvmsg_payload(
        o: *mut io_uring_recvmsg_out,
        msgh: *mut msghdr,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "io_uring_recvmsg_payload_length__extern"]
    pub fn io_uring_recvmsg_payload_length(
        o: *mut io_uring_recvmsg_out,
        buf_len: ::std::os::raw::c_int,
        msgh: *mut msghdr,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_openat2__extern"]
    pub fn io_uring_prep_openat2(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        how: *mut open_how,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_openat2_direct__extern"]
    pub fn io_uring_prep_openat2_direct(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        how: *mut open_how,
        file_index: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_epoll_ctl__extern"]
    pub fn io_uring_prep_epoll_ctl(
        sqe: *mut io_uring_sqe,
        epfd: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
        ev: *mut epoll_event,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_provide_buffers__extern"]
    pub fn io_uring_prep_provide_buffers(
        sqe: *mut io_uring_sqe,
        addr: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        bgid: ::std::os::raw::c_int,
        bid: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_remove_buffers__extern"]
    pub fn io_uring_prep_remove_buffers(
        sqe: *mut io_uring_sqe,
        nr: ::std::os::raw::c_int,
        bgid: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_shutdown__extern"]
    pub fn io_uring_prep_shutdown(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        how: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_unlinkat__extern"]
    pub fn io_uring_prep_unlinkat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_unlink__extern"]
    pub fn io_uring_prep_unlink(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_renameat__extern"]
    pub fn io_uring_prep_renameat(
        sqe: *mut io_uring_sqe,
        olddfd: ::std::os::raw::c_int,
        oldpath: *const ::std::os::raw::c_char,
        newdfd: ::std::os::raw::c_int,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_rename__extern"]
    pub fn io_uring_prep_rename(
        sqe: *mut io_uring_sqe,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_sync_file_range__extern"]
    pub fn io_uring_prep_sync_file_range(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        offset: __u64,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_mkdirat__extern"]
    pub fn io_uring_prep_mkdirat(
        sqe: *mut io_uring_sqe,
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_mkdir__extern"]
    pub fn io_uring_prep_mkdir(
        sqe: *mut io_uring_sqe,
        path: *const ::std::os::raw::c_char,
        mode: mode_t,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_symlinkat__extern"]
    pub fn io_uring_prep_symlinkat(
        sqe: *mut io_uring_sqe,
        target: *const ::std::os::raw::c_char,
        newdirfd: ::std::os::raw::c_int,
        linkpath: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_symlink__extern"]
    pub fn io_uring_prep_symlink(
        sqe: *mut io_uring_sqe,
        target: *const ::std::os::raw::c_char,
        linkpath: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_linkat__extern"]
    pub fn io_uring_prep_linkat(
        sqe: *mut io_uring_sqe,
        olddfd: ::std::os::raw::c_int,
        oldpath: *const ::std::os::raw::c_char,
        newdfd: ::std::os::raw::c_int,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_link__extern"]
    pub fn io_uring_prep_link(
        sqe: *mut io_uring_sqe,
        oldpath: *const ::std::os::raw::c_char,
        newpath: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_msg_ring_cqe_flags__extern"]
    pub fn io_uring_prep_msg_ring_cqe_flags(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        data: __u64,
        flags: ::std::os::raw::c_uint,
        cqe_flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_msg_ring__extern"]
    pub fn io_uring_prep_msg_ring(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_msg_ring_fd__extern"]
    pub fn io_uring_prep_msg_ring_fd(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        source_fd: ::std::os::raw::c_int,
        target_fd: ::std::os::raw::c_int,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_msg_ring_fd_alloc__extern"]
    pub fn io_uring_prep_msg_ring_fd_alloc(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        source_fd: ::std::os::raw::c_int,
        data: __u64,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_getxattr__extern"]
    pub fn io_uring_prep_getxattr(
        sqe: *mut io_uring_sqe,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_setxattr__extern"]
    pub fn io_uring_prep_setxattr(
        sqe: *mut io_uring_sqe,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fgetxattr__extern"]
    pub fn io_uring_prep_fgetxattr(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fsetxattr__extern"]
    pub fn io_uring_prep_fsetxattr(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        len: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_socket__extern"]
    pub fn io_uring_prep_socket(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_socket_direct__extern"]
    pub fn io_uring_prep_socket_direct(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        file_index: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_socket_direct_alloc__extern"]
    pub fn io_uring_prep_socket_direct_alloc(
        sqe: *mut io_uring_sqe,
        domain: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_cmd_sock__extern"]
    pub fn io_uring_prep_cmd_sock(
        sqe: *mut io_uring_sqe,
        cmd_op: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *mut ::std::os::raw::c_void,
        optlen: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_waitid__extern"]
    pub fn io_uring_prep_waitid(
        sqe: *mut io_uring_sqe,
        idtype: idtype_t,
        id: id_t,
        infop: *mut siginfo_t,
        options: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_futex_wake__extern"]
    pub fn io_uring_prep_futex_wake(
        sqe: *mut io_uring_sqe,
        futex: *mut u32,
        val: u64,
        mask: u64,
        futex_flags: u32,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_futex_wait__extern"]
    pub fn io_uring_prep_futex_wait(
        sqe: *mut io_uring_sqe,
        futex: *mut u32,
        val: u64,
        mask: u64,
        futex_flags: u32,
        flags: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct futex_waitv {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_futex_waitv__extern"]
    pub fn io_uring_prep_futex_waitv(
        sqe: *mut io_uring_sqe,
        futex: *mut futex_waitv,
        nr_futex: u32,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_fixed_fd_install__extern"]
    pub fn io_uring_prep_fixed_fd_install(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_prep_cmd_discard__extern"]
    pub fn io_uring_prep_cmd_discard(
        sqe: *mut io_uring_sqe,
        fd: ::std::os::raw::c_int,
        offset: u64,
        nbytes: u64,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_load_sq_head__extern"]
    pub fn io_uring_load_sq_head(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_sq_ready__extern"]
    pub fn io_uring_sq_ready(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_sq_space_left__extern"]
    pub fn io_uring_sq_space_left(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_shift_from_flags__extern"]
    pub fn io_uring_sqe_shift_from_flags(flags: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_sqe_shift__extern"]
    pub fn io_uring_sqe_shift(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_sqring_wait__extern"]
    pub fn io_uring_sqring_wait(ring: *mut io_uring) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_cq_ready__extern"]
    pub fn io_uring_cq_ready(ring: *const io_uring) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[link_name = "io_uring_cq_has_overflow__extern"]
    pub fn io_uring_cq_has_overflow(ring: *const io_uring) -> bool;
}
unsafe extern "C" {
    #[link_name = "io_uring_cq_eventfd_enabled__extern"]
    pub fn io_uring_cq_eventfd_enabled(ring: *const io_uring) -> bool;
}
unsafe extern "C" {
    #[link_name = "io_uring_cq_eventfd_toggle__extern"]
    pub fn io_uring_cq_eventfd_toggle(ring: *mut io_uring, enabled: bool) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_wait_cqe_nr__extern"]
    pub fn io_uring_wait_cqe_nr(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        wait_nr: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "__io_uring_peek_cqe__extern"]
    pub fn __io_uring_peek_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
        nr_available: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_peek_cqe__extern"]
    pub fn io_uring_peek_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_wait_cqe__extern"]
    pub fn io_uring_wait_cqe(
        ring: *mut io_uring,
        cqe_ptr: *mut *mut io_uring_cqe,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "_io_uring_get_sqe__extern"]
    pub fn _io_uring_get_sqe(ring: *mut io_uring) -> *mut io_uring_sqe;
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_mask__extern"]
    pub fn io_uring_buf_ring_mask(ring_entries: __u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_init__extern"]
    pub fn io_uring_buf_ring_init(br: *mut io_uring_buf_ring);
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_add__extern"]
    pub fn io_uring_buf_ring_add(
        br: *mut io_uring_buf_ring,
        addr: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        bid: ::std::os::raw::c_ushort,
        mask: ::std::os::raw::c_int,
        buf_offset: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_advance__extern"]
    pub fn io_uring_buf_ring_advance(br: *mut io_uring_buf_ring, count: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "__io_uring_buf_ring_cq_advance__extern"]
    pub fn __io_uring_buf_ring_cq_advance(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        cq_count: ::std::os::raw::c_int,
        buf_count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_cq_advance__extern"]
    pub fn io_uring_buf_ring_cq_advance(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        count: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "io_uring_buf_ring_available__extern"]
    pub fn io_uring_buf_ring_available(
        ring: *mut io_uring,
        br: *mut io_uring_buf_ring,
        bgid: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "io_uring_get_sqe__extern"]
    pub fn io_uring_get_sqe(ring: *mut io_uring) -> *mut io_uring_sqe;
}
unsafe extern "C" {
    pub fn io_uring_mlock_size(
        entries: ::std::os::raw::c_uint,
        flags: ::std::os::raw::c_uint,
    ) -> isize;
}
unsafe extern "C" {
    pub fn io_uring_mlock_size_params(
        entries: ::std::os::raw::c_uint,
        p: *mut io_uring_params,
    ) -> isize;
}
unsafe extern "C" {
    pub fn io_uring_major_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_minor_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn io_uring_check_version(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
    ) -> bool;
}
pub type __uint128_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
